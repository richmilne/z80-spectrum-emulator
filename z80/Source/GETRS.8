;
;   This file is part of the registered Spectrum emulator package 'Z80'
;   version 2.01, and may not be distributed.  You may use this source for
;   other PC based Spectrum or Z80 emulators only after permission.  It is
;   however permitted to use this source file or parts thereof for Spectrum
;   or Z80 emulators on non-PC based machines, provided that the source is
;   acknowledged.
;
;                                                       Gerton Lunter, 3/5/93

;
; Programma om datablokken van de COM-poort binnen te halen.
;
        jmp start

comint  dw 4*0c                 ;adres van com-interrupt (4*nummer v. interrupt)
oldint  dd 0                    ;inhoud van oude com-interrupt
filnam  dw 0                    ;offset filename
base    dw 03f8                 ;base adr
in21    db 0                    ;inhoud van interrupt enable register van PIC
pointer dw 0                    ;teller voor data
flag    db 0                    ;wordt 1 als data ontvangen wordt
segm    dw 0                    ;segment datablok

start:
        mov dx,tekst0
        mov ah,9
        int 021
        mov ah,04a
        mov bx,len_para         ;lengte GETRS in paragrafen
        int 021                 ;resize
        jc mem_error
        mov ah,048
        mov bx,01000
        int 021                 ;eis 64K op
        jc mem_error
        mov segm,ax
        xor ax,ax
        push ax
        pop es
        mov si,081
line:   lodsb
line0:  cmp al,020
        jz line
        cmp al,9
        jz line
        cmp al,'/'
        jz switch
        cmp al,'-'
        jz switch
        cmp al,0d
        if z jmp einde_comlin
        cmp filnam,0
        jnz lin_error           ;twee filenamen gegeven
        dec si
        mov filnam,si           ;sla begin filenaam op
getfilnam:
        lodsb                   ;zoek einde filenaam
        cmp al,020
        jz end_fn
        cmp al,9
        jz end_fn
        cmp al,0d
        jnz getfilnam
end_fn: mov b[si-1],0
        jmp line0

lin_error:
        mov dx,lin_error_tekst
print:  mov ah,9
        int 021
        mov dx,uitleg
print1: mov ah,9
        int 021
        int 020
mem_error:
        mov dx,mem_error_tekst
        jmp print1
com_error:
        mov dx,com_error_tekst
        jmp print

switch:
        lodsb
        cmp al,'1'
        jb lin_error
        cmp al,'4'
        ja lin_error
        xor ah,ah
        add ax,ax
        push ax
        add ax,0400-2*'1'
        mov bx,ax
        mov ax,es:[bx]          ;haal base adres
        test ax
        jz com_error
        mov base,ax
        pop ax
        and ax,2                ;'1' -> 2, '2' -> 0 etc
        add ax,0b*2
        add ax,ax
        mov comint,ax           ;bewaar adres hardware-interrupt
        jmp line

einde_comlin:
        test filnam,0ffff
        jz lin_error
        mov bx,comint
        mov ax,es:[bx]
        mov w[offset oldint],ax
        mov ax,es:w[bx+2]
        mov w[offset oldint+2],ax
        cli
        mov es:w[bx],offset com_interrupt
        push cs
        pop ax
        mov es:[bx+2],ax
        sti
        and bl,24
        not bl
        in al,021
        mov in21,al
        and al,bl
        out 021,al
        mov dx,tekst1
        mov ah,9
        int 021
        mov ax,0c00
        int 021                 ;wis keyboard buffer
        mov dx,base
        inc dx                  ;ga naar interrupt id. reg
        mov al,1                ;genereer interrupt als data klaar staat
        out dx,al
        add dx,3                ;ga naar modem control reg
        mov al,0b
        out dx,al               ;maak DTR aktief
        mov ah,1
        mov cx,0201f
        int 010                 ;zet cursor uit
lus:    mov ah,0b
        int 021                 ;test toetsenbord
        test al
        jnz einde_input
        mov ax,pointer
        test ax
        jz lus
        inc ax
        jz einde_input
        test flag
        jnz gotbyte
        mov ah,02c
        int 021                 ;haal systeemtijd
        cmp dh,bl               ;vergelijk seconden
        jz lus
        mov bl,dh
        inc bh                  ;verhoog secondenteller
        cmp bh,4
        jbe lus
        jmp einde_input
gotbyte:
        mov flag,0              ;reset flag voor nieuwe byte
        mov dx,bytesgelezen_tekst
        mov ah,9
        int 021
        mov ax,pointer
        mov dh,0
        mov bx,10000
        call printdig
        mov bx,1000
        call printdig
        mov bx,100
        call printdig
        mov bx,10
        call printdig
        mov bx,1
        inc dh
        call printdig
        mov bx,0ff              ;reset secondenteller
        jmp lus

printdig:
        mov dl,'0'-1
prdig1: inc dl
        sub ax,bx
        jnc prdig1
        add ax,bx
        cmp dl,'0'
        jnz prdig2
        dec dh
        jns prdig2
        mov dl,020
prdig2: push ax
        mov ah,2
        int 021
        pop ax
        inc dh
        ret

einde_input:
        mov cx,01e1f
        mov ah,1
        int 010                 ;zet cursor weer aan
        mov ah,0b
        int 021
        test al
        jz geen_toets
        mov dx,toetsdruk_tekst
        mov ah,9
        int 021
        mov ax,0c00
        int 021
geen_toets:
        mov dx,base
        inc dx
        xor al,al
        out dx,al               ;zet interrupt uit
        add dx,3
        out dx,al               ;zet DTR ook uit
        mov al,in21
        out 021,al              ;herstel irpt-enable-register van PIC
        mov bx,comint           ;reset oude int-vector
        cli
        mov ax,w[offset oldint]
        mov es:w[bx],ax
        mov ax,w[offset oldint+2]
        mov es:w[bx+2],ax
        sti
        mov cx,pointer
        test cx
        if z int 020            ;ga eruit als er geen bytes zijn
        mov dx,bewaren_tekst
        mov ah,9
        int 021
        push cx
        mov ax,03c02
        mov cx,020
        mov dx,filnam
        int 021                 ;create file
        pop cx
        jc file_error
        mov bx,ax
        push ds
        mov ax,segm
        push ax
        pop ds
        mov ah,040
        xor dx,dx
        int 021                 ;schrijf blok
        pop ds
        jc file_error
        cmp ax,cx
        jnz file_error
        mov ah,03e
        int 021
        jc file_error
        int 020

file_error:
        mov dx,file_error_tekst
        mov ah,9
        int 021
        int 020

com_interrupt:
        push es
        push ax
        push bx
        push dx
        mov cs:flag,1
        mov ax,cs:segm
        push ax
        pop es
        mov dx,cs:base
        add dx,5
        in al,dx
        test al,1               ;test op data ready
        jz leesfout             ;zo niet dan klopt er iets niet
        sub dx,5
        in al,dx                ;haal databyte
        add dx,5
        mov bx,cs:pointer
        mov es:[bx],al
        inc bx
        jz leesfout
        mov cs:pointer,bx
leesfout:
        inc dx
        in al,dx                ;lees (reset) het Modem Status register
        sti
        mov al,020
        out 020,al              ;reset interrupt controller
        pop dx
        pop bx
        pop ax
        pop es
        iret

tekst0:
        db "GETRS - receives data via COM port - (c) 1993 by G.A. Lunter - version 2.01",0d,0a
        db "        This program is part of the Spectrum Emulator package.",0d,0a,'$'
lin_error_tekst:
        db 0d,0a,"Error in command-line$"
mem_error_tekst:
        db 0d,0a,"Insufficient memory - at least 64K needed",0d,0a,0a,'$'
com_error_tekst:
        db 0d,0a,"COM-port does not exist$"
uitleg:
        db 0d,0a,0a,"Syntax:  GETRS [/{1,2,3,4}] filename.ext",0d,0a,0d,0a
        db "By default COM1 is used.  This can be changed by specifying a switch. Make sure",0d,0a
        db "to initialise the COM channel using the DOS command MODE before GETRS is used.",0d,0a,0d,0a,'$'
tekst1:
        db 0d,0a,"Ready to receive data. Press any key to interrupt.",0d,0a,0a,0a,'$'
bytesgelezen_tekst:
        db 0d,"Bytes read: $"
toetsdruk_tekst:
        db 0d,0a,"Key pressed -- transmission interrupted.",0d,0a,0a,'$'
bewaren_tekst:
        db 0d,0a,"Data block is being saved.",0d,0a,0a,'$'
file_error_tekst:
        db "Error while saving data block.",0d,0a,0a,'$'

len_para        equ ($+15)/16


