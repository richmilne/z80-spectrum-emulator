;
;   This file is part of the registered Spectrum emulator package 'Z80'
;   version 2.01, and may not be distributed.  You may use this source for
;   other PC based Spectrum or Z80 emulators only after permission.  It is
;   however permitted to use this source file or parts thereof for Spectrum
;   or Z80 emulators on non-PC based machines, provided that the source is
;   acknowledged.
;
;                                                       Gerton Lunter, 3/5/93

EMULATOR SEGMENT PARA PUBLIC

;Alle blokjes hebben offset 0B7. Als dit veranderd wordt, verander dan
; ook de aanroepen van MOVECOMMAND in Z80.8

testoverflow macro
##if !(($ - irupt + 0b7) and 080)
        This will give an error message
##endif
#em

;MACRO VOOR ( LD/CP/OT/IN )( I/D ) [R] ROUTINES

EDMAC MACRO
##IF '#1'='LDIR'
        XCHG BX,DX
        PUSH AX
M9:     MOV AH,[BX]
        MEMP SI,AH
        #2 BX
        #2 SI
        DEC CX
        JZ >M0
##IF '#3'='R'
##IF '#2'='INC'
        CMP W[DI-2],0B0ED
##ELSE
        CMP W[DI-2],0B8ED
##ENDIF
        JZ M9
        DEC DI
        DEC DI
##ENDIF
        POP AX
        XCHG DX,BX
        OR AH,4
        JX 16
M0:     POP AX
        XCHG DX,BX
        AND AH,011101001XB
        JX 16


##ELSEIF '#1'='CPIR'
M9:     MOV BX,DX
        #2 DX
        DEC CX
        CMP [BX],AL
        RCR AH,1
        LAHF
        JCXZ >M0
##IF '#3'='R'
        SAHF
        JZ >M1
        JMP M9
##ENDIF
M1:     OR AH,4
        JX 16
M0:     AND AH,011111011XB
        JX 16


##ELSEIF '#1'='INIR'
##if ('#2'='INC') and ('#3'='R')
        cmp cl,0e7
        jnz >m8
;       jmp far mdrv_inir
        db 0ea
        dw offset mdrv_inir
sfix10: dw 0
m8:
##endif
M9:     CALL IN_BC
        XCHG BX,DX
        MEMP BX,DH
        XCHG BX,DX
        #2 DX
        SAHF
        DEC CH
        LAHF
##IF '#3'='R'
        JNZ M9
##ENDIF
        JX 16

##ELSEIF '#1'='OTIR'
##if ('#2'='INC') and ('#3'='R')
        cmp cl,0e7
        jnz >m8
;       jmp far mdrv_otir
        db 0ea
        dw offset mdrv_otir
sfix11: dw 0
m8:
##endif
M9:     MOV BX,DX
        MOV BH,[BX]
        CALL OUT_BC
        #2 DX
        SAHF
        DEC CH
        LAHF
##IF '#3'='R'
        JNZ M9
##ENDIF
        JX 16
##ENDIF
#EM









        ORG (0 SHL 8)+0B7
IRUPT:
        PUSH AX
        xor al,al
        xchg ES:BYTE NMI,al
        cmp al,0fe
        IF Z JMP CAST_NMI
        CMP al,07F
        IF Z JMP CAST_RESET
        XOR AX,AX
        MOV ES:W[OFFSET IFF],AX
        MOV AL,ES:IMODE
        CMP AL,2
        IF Z JMP MODE2
        MOV AX,038              ;RST 038
        JMP NOTEOM


        testoverflow
        ORG (1 SHL 8)+0B7
CAST_NMI:                       ;See also IMMEDIATE_NMI in MISC.8
        cmp byte es:rommod,2
        if z CALL RESET_ALL
        MOV AX,066
        JMP SHORT NOTEOM
CAST_RESET:
        cmp es:byte if1flg,0     ;IF1 rom paged?
        if nz call pagin_n_rom
        CALL RESET_ALL
        XOR AX,AX
        MOV ES:IFF,AX

NOTEOM: DEC BP
        DEC BP
        test bp,0c000
        if nz MOV DS:[BP],DI
        mov di,ax
        pop ax
        jmp emulate

MODE2:  MOV BH,ES:RI
        MOV BL,0FF
        MOV AL,[BX]             ;Actually, this should happen after the push pc,
        INC BX                  ; but probably no one needs it...
        MOV AH,[BX]             ;met MOV AX,[BX] gaat I=FF fout op AT's
        jmp short noteom






        testoverflow
        ORG (2 shl 8)+0B7
EDOP4A:
        SAHF
        ADC DX,CX               ;ADC HL,BC
        LAHF
        OVA 15
        JX 15
EDOP4B:
        MOV BX,[DI]             ;LD BC,(NN)
        MOV CX,[BX]
        INC DI
        INC DI
        JX 20
EDOP40:
        CALL IN_BC              ;IN B,(C)
        MOV CH,BH
        JX 12

        testoverflow
        ORG 0B7+(3 SHL 8)
EDOP43:
        MOV BX,[DI]             ;LD (NN),BC
        MEMP BX,CX
        INC DI
        INC DI
        JX 20

EDOP44: NEG AL                  ;NEG
        LAHF
        OVS 8
        JX 8


        testoverflow
        ORG 0B7+(4 SHL 8)
EDOP49:
        MOV BH,CL               ;OUT (C),C
        CALL OUT_BC
        JX 12
EDOP4F:
        MOV BX,AX               ;LD R,A
        CBW
        MOV ES:[OFFSET RR],AX
        XCHG AX,BX
        JX 9
EDOP50:
        CALL IN_BC              ;IN D,(C)
        XCHG DX,SI
        MOV DH,BH
        XCHG DX,SI
        JX 12


        testoverflow
        ORG 0B7+(5 SHL 8)
EDOP53:
        MOV BX,[DI]             ;LD (NN),DE
        MEMP BX,SI
        INC DI
        INC DI
        JX 20
EDOP57:
        MOV AL,ES:RI            ;LD A,I
EXTRA_FLAGS:
        AND AH,0101010XB
        MOV BL,AH
        TEST AL,AL
        LAHF
        AND AH,011000000XB
        OR AH,BL
        CMP BYTE ES:IFF2,0
        JZ EXTRA_FLAGS_KLAAR
        OR AH,0100XB
EXTRA_FLAGS_KLAAR:
        JX 9


        testoverflow
        ORG 0B7+(6 SHL 8)
EDOP58:
        CALL IN_BC              ;IN E,(C)
        XCHG DX,SI
        MOV DL,BH
        XCHG DX,SI
        JX 12
EDOP59:
        XCHG DX,SI
        MOV BH,DL               ;OUT (C),E
        XCHG DX,SI
        CALL OUT_BC
        JX 12


        testoverflow
        ORG 0B7+(7 SHL 8)
EDOP60:
        CALL IN_BC              ;IN H,(C)
        MOV DH,BH
        JX 12
EDOP61:
        MOV BH,DH               ;OUT (C),H
        CALL OUT_BC
        JX 12
EDOP62:
        SAHF
        SBB DX,DX               ;SBC HL,HL
        LAHF
        OVS 15
        JX 15


        testoverflow
        ORG 0B7+(8 SHL 8)
EDOP67:
        XCHG DX,SI
        MOV BL,[SI]
        MOV BH,AL
        XOR AL,BL
        AND AL,0F0
        XOR AL,BL
        SHR BX,1
        SHR BX,1
        SHR BX,1
        SHR BX,1
        MOV [SI],BL
        XCHG DX,SI
        AND AL,AL
        RCR AH,1
        LAHF
        JX 18
EDOP68:
        CALL IN_BC              ;IN L,(C)
        MOV DL,BH
        JX 12
EDOP69:
        MOV BH,DL               ;OUT (C),L
        CALL OUT_BC
        JX 12


        testoverflow
        ORG 0B7+(9 SHL 8)
EDOP6F:
        XCHG SI,DX              ;RLD
        MOV BL,[SI]
        XOR BH,BH
        SHL BX,1
        SHL BX,1
        SHL BX,1
        SHL BX,1
        XOR BL,AL
        AND BL,0F0
        XOR BL,AL
        AND AL,0F0
        OR AL,BH
        MOV [SI],BL
        XCHG DX,SI
        RCR AH,1
        LAHF
        JX 18


        testoverflow
        ORG 0B7+(10 SHL 8)
EDOP73:
        MOV BX,[DI]             ;LD (NN),SP
        MEMP BX,BP
        INC DI
        INC DI
        JX 20
EDOP78:
        CALL IN_BC              ;IN A,(C)
        MOV AL,BH
        JX 12
EDOP79:
        MOV BH,AL               ;OUT (C),A
        CALL OUT_BC
        JX 12


        testoverflow
        ORG 0B7+(11 SHL 8)
EDOPA0: EDMAC LDIR,INC,NR


        testoverflow
        ORG 0B7+(12 SHL 8)
EDOPA2: EDMAC INIR,INC,NR
EDOPA3: EDMAC OTIR,INC,NR


        testoverflow
        ORG 0B7+(13 SHL 8)
EDOPA8: EDMAC LDIR,DEC,NR


        testoverflow
        ORG 0B7+(14 SHL 8)
EDOPB1: EDMAC CPIR,INC,R,0B1


        testoverflow
        ORG 0B7+(15 SHL 8)
EDOPB3: EDMAC OTIR,INC,R,0B7
EDOP7A:
        SAHF
        ADC DX,BP               ;ADC HL,SP
        LAHF
        OVA 15
        JX 15



;
;The blocks at 0b7+16*256 to 0b7+20*256 are below
;



        testoverflow
        ORG 0B7+(21 SHL 8)
in_bc:  mov bx,cx               ;Moet blijven staan!!
IN_CONTINUE:
        SAHF
        PUSHF
        MOV AH,0FF              ;VOORL. RESULT
        CMP BL,254
        IF NZ JMP not_keyboard
        CMP byte ES:MODFLG,0
        IF nZ JMP IN_KEYB_REALMODE
        PUSH AX
        MOV AH,0BF
VERSIE_ADRES    EQU $-1         ;HIERIN MOET 0BF OF 0FF GEPOKED WORDEN.
        push dx
        MOV DX,ES:WORD TAPEIO
        IN AL,DX
        shr al,1
        AND AL,040
        XOR AH,AL
        POP Dx
        MOV AL,BH
        MOV BX,IN_TAB
IN_LOOP:
        STC
        RCR AL,1
        IF NC AND AH,ES:[BX]
        INC BX
        CMP AL,0FF
        JNZ IN_LOOP
        POP BX
        MOV AL,BL               ;HAAL AL TERUG; RESULTAAT IN AH
        jmp unknown_in_address
;2 bytes over!!


        testoverflow
        ORG 0B7+(22 SHL 8)
not_keyboard:
;       call far not_keyboard_far
        db 09a
        dw offset not_keyboard_far
sfix8:  dw 0
        cmp byte es:c_action_code,0fd   ;in 0 crash?
        jz in0_crashed
        popf
        lahf
        ret
in0_crashed:
        popf
        lahf
        pop bx                          ;throw away return address to calling IN
        mov bl,0fd
        jmp call_c_immediately



        testoverflow
        ORG 0B7+(23 SHL 8)
;EDFF=NAAR DOS
;EDFE=ROMPOKE HL,A
;EDFD=LDIR ROMPOKE
;EDFC=LDDR ROMPOKE
;EDFB=RAMBANK LD HL,A
;EDFA=RAMBANK LD A,HL
;EDF9=LD A,NORMAL_ROM:(DE) \ LD (HL),A \ INC E \ INC H
;
QUEER2:
;
;DIT IS EEN 'OPCODE' DIE ZORGT VOOR EEN SNELLERE PRINT-ROUTINE
;
        cmp byte es:rommod,2
        jnz jxlabel
        test word es:emshandle
        jz >l1
        ;jmp far queer2_ems
        db 0ea
        dw offset queer2_ems
sfix15: dw 0
l1:
        PUSH ES
        PUSH AX
        mov ax,es:romseg
        MOV ES,AX
        POP AX
        MOV AL,ES:[SI+08000]            ;HAAL EEN BYTE UIT DE SAMROM
        POP ES
        MOV BX,DX
        MEMP BX,AL                      ;LD (HL),A
        XCHG BX,SI
        INC BL                          ;INC E
        XCHG BX,SI
        INC DH                          ;INC H
JXLABEL:
        JX 4


        testoverflow
        ORG 0B7+(24 SHL 8)
LDOBHLA:
        cmp byte es:rommod,2
        jnz ldobhla_jx
        test word es:emshandle
        jz >l1
        ;jmp far ldobhla_ems
        db 0ea
        dw offset ldobhla_ems
sfix13: dw 0
l1:
        MOV BX,DX
        cmp BH,080
        JB NORMAL_RAM
        cmp es:b[offset ramstate+2],4          ;First bank paged in?
        PUSH ES
        PUSH AX
        MOV AX,ES:romseg
        if z add ah,08                          ;if so, go up by 32K
        add ah,08                               ;step over 2 roms
        MOV ES,AX
        POP AX
        MOV ES:[BX],AL
        POP ES
ldobhla_jx:
        JX 4
NORMAL_RAM:
        mov [bx],al                     ;no memp, but this opcode is only used by
        jmp ldobhla_jx                  ;samram and its programmer can be trusted


        testoverflow
        ORG 0B7+(25 SHL 8)
LDOBAHL:
        cmp byte es:rommod,2
        jnz ldobahl_jx
        test word es:emshandle
        jz >l1
        ;jmp far ldobahl_ems
        db 0ea
        dw offset ldobahl_ems
sfix14: dw 0
l1:
        MOV BX,DX
        cmp BH,080
        JB NORMAL_RAM_PEEK
        cmp es:b[offset ramstate+2],4          ;First bank paged in?
        PUSH ES
        PUSH AX
        MOV AX,ES:romseg
        if z add ah,08                          ;if so, go up by 32K
        add ah,08                               ;step over 2 roms
        MOV ES,AX
        POP AX
        MOV AL,ES:[BX]
        POP ES
ldobahl_jx:
        JX 4
NORMAL_RAM_PEEK:
        MOV AL,[BX]
        jmp ldobahl_jx


        testoverflow
        ORG 0B7+(26 SHL 8)
LDROMHLA:
        MOV BX,DX
        CMP BH,040
        if ae mov [bx],al
        jx 4


        testoverflow
        ORG 0B7+(27 SHL 8)
;
;ed opcode 0fd, send byte from emulated rs232 port
;
sendbyte:
;       CALL FAR ED_SENDRSBYTE          ;IN Z80.8
        db 09a
        dw ed_sendrsbyte
sfix5:  dw 0
        JX 4


        testoverflow
        ORG 0B7+(28 SHL 8)
;
;ed opcode 0fc, get byte to emulated rs232 port
;
getbyte:
;       CALL FAR ED_GETRSBYTE           ;IN Z80.8
        db 09a
        dw ed_getrsbyte
sfix6:  dw 0
        JX 4


        testoverflow
        ORG 0B7+(29 SHL 8)
CARCH:  TEST CH
        STC
        LAHF
        JX 4
CARCL:  TEST CL
        STC
        LAHF
        JX 4
CARES:  TEST BH
        XCHG BX,SI
        STC
        LAHF
        JX 4


        testoverflow
        ORG 0B7+(30 SHL 8)
EDOPB9: EDMAC CPIR,DEC,R,0B9
pokebx: test bh,0c0
        if nz mov [bx],ah
        TEST ah,ah
        LAHF
        jx 12


        testoverflow
        ORG 0B7+(31 SHL 8)
EDOPBB: EDMAC OTIR,DEC,R,0BB
CARDL:  TEST DL
        STC
        LAHF
        JX 8
CARAL:  TEST AL
        STC
        LAHF
        JX 8


        testoverflow
        ORG 0B7+(32 SHL 8)
EDOPB0:

;
;0b7+256*33 wordt ook gebruikt door LDDR
;


        testoverflow
        ORG 0B7+(34 SHL 8)
EDOPB8:

;
;0b7+256*35 wordt ook gebruikt door LDIR
;


        testoverflow
        ORG 0B7+(36 SHL 8)
CARBY:  TEST BL
        XCHG BX,SI
        STC
        LAHF
        JX 8
CARDH:  TEST DH
        STC
        LAHF
        JX 8
CARBX:  test bh,0c0
        if nz mov [bx],ah
        TEST ah,ah
        STC
        LAHF
QUEER1:
        JX 12


;
;The block at 0b7+37*256 is below
;



        testoverflow
        ORG 0B7+(38 SHL 8)
EDOP7B:
        MOV BX,[DI]             ;LD SP,(NN)
        MOV BP,[BX]
        INC DI
        INC DI
        JX 20
EDOPA9: EDMAC CPIR,DEC,NR


        testoverflow
        ORG 0B7+(39 SHL 8)
EDOPA1: EDMAC CPIR,INC,NR


        testoverflow
        ORG 0B7+(40 SHL 8)
EDOP72:
        SAHF
        SBB DX,BP               ;SBC HL,SP
        LAHF
        OVS 15
        JX 15
EDOP63:
        MOV BX,[DI]             ;LD (NN),HL *ONOFFICIEEL*
        MEMP BX,DX
        INC DI
        INC DI
        JX 20



        testoverflow
        ORG 0B7+(41 SHL 8)
EDOP5E:
        MOV ES:BYTE IMODE,2     ;IM 2
        JX 8
EDOP56:
        MOV ES:BYTE IMODE,1     ;IM 1
        JX 8


        testoverflow
        ORG 0B7+(42 SHL 8)
EDOP48:
        CALL IN_BC              ;IN C,(C)
        MOV CL,BH
        JX 12
EDOP42:
        SAHF
        SBB DX,CX               ;SBC HL,BC
        LAHF
        OVS 15
        JX 15


        testoverflow
        ORG 0B7+(43 SHL 8)
RESET_ALL:
        PUSH CX
        MOV ES:BYTE NMI,0        ;ZET NMI-FLAG UIT
        MOV ES:B[IN31TAB+2],0    ;ZET OUT 31,5 UIT
        MOV CX,31
        MOV BH,14
RESET_259:                      ;RESET DE SOFTWARE-74 LS 259
        PUSH BX
        CALL OUT_BC             ;DOE RESP. OUT 31,14; OUT 31,12 ETC.
        POP BX
        SUB BH,2
        JNS RESET_259
        and byte es:hstate,31   ;reset bit 5
        xor bh,bh
        mov cx,07ffd
        call out_bc             ;out 7ffd,0
        POP CX
        XOR AL,AL
        XCHG AL,ES:IFF
        MOV ES:IFF2,AL
        RET
reset_all_far:
        call reset_all
        retf



        testoverflow
        ORG 0B7+(45 SHL 8)
CLOS_IF1_ENTRY:        
        TEST BYTE ES:IF1_ON
        jnz >l1
        JX 4                    ;RETURN ALS STANDARD SPECTRUM
l1:
;       CALL far PAGEIN_IF1_ROM
        db 09a
        dw offset pagein_if1_rom
sfix9:  dw 0
        MOV DI,01708
        JX 4


        testoverflow
        ORG 0B7+(46 SHL 8)
EDOP6B:
        MOV BX,[DI]             ;LD HL,(NN) *ONOFFICIEEL*
        MOV DX,[BX]
        INC DI
        INC DI
        JX 20
EDOP6A:
        SAHF
        ADC DX,DX               ;ADC HL,HL
        LAHF
        OVA 15
        JX 15


        testoverflow
        ORG 0B7+(47 SHL 8)
EDOP5B:
        MOV BX,[DI]             ;LD DE,(NN)
        MOV SI,[BX]
        INC DI
        INC DI
        JX 20
EDOP47:
        MOV ES:RI,AL            ;LD I,A
        JX 9
EDOP41:
        MOV BH,CH               ;OUT (C),B
        CALL OUT_BC
        JX 12


;
;block 48 follows below
;




        testoverflow
        ORG 0B7+(50 SHL 8)
EDOP52:
        SAHF
        SBB DX,SI               ;SBC HL,DE
        LAHF
        OVS 15
        JX 15


        testoverflow
        ORG 0B7+(51 SHL 8)
EDOPBA: EDMAC INIR,DEC,R,0BA


        testoverflow
        ORG 0B7+(52 SHL 8)
EDOPB2: EDMAC INIR,INC,R,0B2


        testoverflow
        ORG 0B7+(53 SHL 8)
EDOP5A:
        SAHF
        ADC DX,SI               ;ADC HL,DE
        LAHF
        OVA 15
        JX 15
EDOP51:
        XCHG DX,SI
        MOV BH,DH               ;OUT (C),D
        XCHG DX,SI
        CALL OUT_BC
        JX 12


        testoverflow
        ORG 0B7+(54 SHL 8)
EDOP46:
        MOV BYTE ES:IMODE,0     ;IM 0
        JX 8



        testoverflow
        ORG 0B7+(56 SHL 8)
EDOP5F:                         ;LD A,R
        MOV BH,AH
        MOV AX,WORD ES:RR
        TEST BYTE ES:mflag,1    ;mflag: bit 0=1 if r register emulated
        JNZ USE_RR
        MOV AX,WORD ES:R_RND
        CMP AX,0FFFF
        JNZ DO_RND
        MOV AX,-75
        JMP USE_R_RND
DO_RND:
        INC AX
        PUSH DX
        MOV DX,75
        MUL DX
        SUB AX,DX
        DEC AX
        POP DX
USE_R_RND:
        MOV WORD ES:R_RND,AX
        MOV AH,ES:B[OFFSET RR+1]
USE_RR:
        SHL AL,1
        SHR AX,1
        MOV AH,BH
        JMP EXTRA_FLAGS


        testoverflow
        ORG 0B7+(57 SHL 8)
EDOPAA: EDMAC INIR,DEC,NR
EDOPAB: EDMAC OTIR,DEC,NR


        testoverflow
        ORG 0B7+(58 SHL 8)
PAGEIF1:
;       CALL far PAGEIN_IF1_ROM
        db 09a
        dw offset pagein_if1_rom
sfix2:  dw 0
        JX 4
OUT_BC_FAR:
        CALL OUT_BC
        RETF



END_SPEC:
        int 3
;       JMP FAR END_SPECTR
        db 0ea
        dw end_spectr
sfix7:  dw 0





        testoverflow
        org 0b7+(64 SHL 8)
sarrom: lahf
        mov ah,b[bx]
        sar ah,1
        sahf
        jx 4
salrom: lahf
        mov ah,b[bx]
        sal ah,1
        sahf
        jx 4
shrrom: lahf
        mov ah,b[bx]
        shr ah,1
        sahf
        jx 4

        testoverflow
        org 0b7+(65 SHL 8)
;Vrij!


        testoverflow
        org 0b7+(66 SHL 8)
in_keyb_realmode:
        push ax
        mov ah,0bf
versie_adres2   equ $-1         ;HIERIN MOET 0BF OF 0FF GEPOKED WORDEN.
        mov bx,dx
        mov dx,es:word tapeio
        in al,dx
        shr al,1
        and al,040
        xor ah,al
notapeinput2:
        mov dx,bx
        POP BX
        MOV AL,BL               ;HAAL AL TERUG; RESULTAAT IN AH
UNKNOWN_IN_ADDRESS:
        POPF
        MOV BH,AH
        LAHF
        RET                     ;AH IS NIET VERANDERD!!!



        testoverflow
        org 0b7+(67 SHL 8)          ;Moet hier blijven staan!! (Zie install_fastin)
IN_slow:
        mov bl,[di]
        INC DI                  ;IN A,N
        MOV BH,AL               ;AL IN DE MSB
        CALL IN_CONTINUE
        MOV AL,BH
        JX 11

        testoverflow
        org 0b7+(68 SHL 8)          ;MOET hier blijven staan (zie SILENCE_INST)
overscan0:
        cmp es:byte modflg,0
        jz ret
        cmp es:byte gmod,4              ;4=ega, 5=vga
        jb ret
        push ax
        push dx
        mov dx,03da
        in al,dx
        if nz jmp overscan_vga
        mov bx,offset ega_border_palette
        and ah,7
        add bl,ah
        mov al,031
        mov ah,es:[bx]
        mov dl,0c0
        out dx,al
        mov al,ah
        out dx,al
        pop bx
        pop ax
getdxback:
        mov dx,bx
        ret

        testoverflow
        org 0b7+(73 shl 8)
overscan_vga:
        and ah,7
overscan_vga_wait:
;        in al,dx
;        test al,1
;        jz overscan_vga_wait
        mov al,8
        mov dl,0c0
        out dx,al
        mov al,ah
        out dx,al
        mov al,49
        mov dl,0c0
        out dx,al
        mov al,ah
        out dx,al
        pop dx
        pop ax
        ret




        testoverflow
        org 0b7+(69 SHL 8)
overscan:
        call overscan0
        retf
        ret
sa_dihandler:
        jnz jxlabel2
        cmp byte es:modflg,0
        jnz jxlabel2
        mov bl,0f3
        jmp call_c_immediately
jxlabel2:
        jx 4


        testoverflow
        org 0b7+(70 SHL 8)
ld_cpahandler:
        cmp byte es:modflg,0
        jnz ret
        pop bx
        mov bl,0f2
call_c_immediately:
        mov word es:trapadr,offset emulate
        mov word es:trapseg,cs
        mov byte es:c_active,0
        mov byte es:c_action_code,bl
;        jmp far enter_c
        db 0ea
        dw enter_c
sfix16: dw 0
        ret
call_c_immediately_halt:
        INC DI
        mov bl,0fe
        jmp call_c_immediately
;        mov byte es:c_active,0f2             ;LOAD block
;        mov byte es:c_action_code,0f2
;sald_handler:
;        mov di,01303
;        push ax
;        in al,021
;        and al,0fe
;        out 021,al
;        pop ax
;        ret


        testoverflow
        org 0b7+(71 SHL 8)
noinc_ixiy:
        mov bl,[bx]
        sahf
        inc bl
        lahf
        ova KR,11
        jx 11
nodec_ixiy:
        mov bl,[bx]
        sahf
        dec bl
        lahf
        ovs KR,11
        jx 11


;
;
;Now the routines dedicated to the handling of OUT instructions follow.
;
;

        testoverflow
        org 0b7+(16 SHL 8)              ;This address may not be changed!
out_bc:                                 ;The actual code is in Z80.8
        SAHF                            ; and is transferred here by
        MOV AH,BH                       ; Silence_Inst
        MOV BX,CX
OUT_CONTINUE:
        PUSHF
        TEST BL,1
        IF NZ JMP no_speaker
        call overscan0
        MOV BX,AX
        IN AL,061
        XCHG AL,AH
        MOV ES:BYTE NEWBOR,AL
        AND AX,0FD10
        ADD AL,-16
        SBB AL,AL
        AND AL,2
        OR AL,AH
        OUT 061,AL
        MOV AX,BX
        POPF
        LAHF
        RET

        testoverflow
        ORG 0B7+(17 SHL 8)              ;This address may not be changed!
NO_SPEAKER:
;       call far no_speaker_far
        db 09a
        dw offset no_speaker_far
sfix4:  dw 0
        popf
        lahf
        ret


        testoverflow
        ORG 0B7+(44 SHL 8)
PAGIN_N_ROM:                            ;This routine pages the normal
        push ds                         ; or any of the SamRam rom's
        push es                         ; back in if the Interface I
        pop ds                          ; has finished.
        MOV BYTE IF1FLG,0
        xchg ax,bx
        mov ax,02ff                     ;default secondary rom: bank 2
        cmp byte rommod,ah         ;just to save one byte, no mysterious
        jb pnr_done                ;connection between the two two's.
        ja pnr_128
        MOV Al,[IN31TAB+1]         ;ff=samram inactive
        test byte [in31tab+3]      ;which samram rom should be paged in?
        if nz inc ah               ;ordinary samrom or 2nd samrom (bank 2 or 3)
        jmp short pnr_done
pnr_128:
        mov al,[hstate]            ;'128? (bit 4=1: old rom active)
pnr_done:
        and al,16                  ;nonzero: page in normal rom (rom 0)
        mov al,0
        jnz pnr_normalrom
        mov al,ah
pnr_normalrom:
        pop ds
        xor ah,ah
;       call far swap_mem_far
        db 09a
        dw swap_mem_far
sfix12: dw 0
        xchg ax,bx              ;swap_mem_far doesn't touch the BX register
        ret
pagin_n_rom_far:
        call pagin_n_rom
        retf


        org 0b7+(74 shl 8)
EDOP45: MOV BH,ES:IFF2          ;RETN
        MOV ES:IFF,BH
EDOP4D: XOR BL,BL
        JMP OPC201              ;RETI



        org 0b7+(75 shl 8)
trapper:
        int 3
        xor bh,bh               ;This is functionally equivalent to JX
        mov bl,[di]             ; but rreg_inst won't change it.
        xchg bl,bh
        push bx
        ret

;
;Eerste vrije: 76
;

;
;104 to 123: slowdown routines for 4 to 23 T state instructions
;
        testoverflow
        ORG 0FFef
        NOP


EMULATOR ENDS

jxtable segment byte public
        dw 0                    ;end-marker
        db 0
        db 768 dup 0            ;allocate space for 256-8 CB instructions
jxtable ends

