;
;   This file is part of the registered Spectrum emulator package 'Z80'
;   version 2.01, and may not be distributed.  You may use this source for
;   other PC based Spectrum or Z80 emulators only after permission.  It is
;   however permitted to use this source file or parts thereof for Spectrum
;   or Z80 emulators on non-PC based machines, provided that the source is
;   acknowledged.
;
;                                                       Gerton Lunter, 3/5/93

CONVERT_TEXT SEGMENT BYTE PUBLIC 'CODE'

;
;Machinecode routines behorende bij Convert.C
;In deze file zitten de GIF codeer en decodeer routines, en de routines
;voor het printen van Spectrum 'Tokens' (keywords).
;

codelength      db ?            ;aantal output bits (variabel, begint met 5)
maxcodeval      dw ?            ;maximum waarde van 'code' (2^codelength)
firststep       dw ?            ;macht van twee, begint bij 32
datap           dd ?            ;huidige pointer datafile
datal           dw ?            ;resterende bytes in datafile
next_table      dw ?            ;pointer eerste lege entry table
next_ptable     dw ?            ;pointer eerste lege entry ptable
first_ptable    dw ?            ;pointer eerste te gebruiken ptable entry
next_code       dw ?            ;nummer eerste vrije code
stringid        dw ?            ;idcode current string (=lengte + äcodes)
adder           dw ?            ;workspace voor bin.search routine
outc            dw ?            ;teller bytes in output buffer
outp            dd ?            ;pointer naar output buffer
outpb           db ?            ;bitcount output
tabseg          dw ?            ;segment table en gesorteerde pointertable
outh            dw ?            ;handle output file
worksp          db ?            ;workspace voor flush_buf

;
;void process_screen(screen,buf)
;char *screen,*buf;
;
_process_screen:
        push bp
        mov bp,sp
        struc [bp]
        dw ?
        dd ?
screen  dd ?
buf     dd ?
        ends
        push si
        push di
        mov si,6144             ;source, wijst naar ATTR
        mov cx,768              ;bytes ATTR
attrloop:
        push cx
        push si
        les bx,screen
        mov dl,es:[bx+si]

        mov ax,si
        mov dh,32
        div dh
        xchg ah,al
        mov cl,3
        shl ax,cl
        mov di,ax               ;di wijst naar goede plaats in output buffer

        mov ax,si
        and ah,cl
        shl ah,cl
        mov si,ax               ;si wijst naar bit mapped screen

        mov al,dl
        rcl al,1
        rcl al,1
        sbb al,al
        and al,8                ;al: brightbit

        mov dh,dl
        and dl,7
        or dl,al                ;dl: ink kleur

        shr dh,cl
        and dh,0f               ;dh: paper kleur

        mov cx,8
bytesloop:
        mov al,es:[bx+si]       ;haal byte
        push cx
        push bx
        push es
        les bx,buf
        mov ah,8                ;8 bit loop
bitsloop:
        shl al,1
        sbb cl,cl
        mov ch,cl
        not ch
        and cx,dx
        or cl,ch
        mov es:[bx+di],cl
        inc di
        dec ah
        jnz bitsloop
        add di,-8+256           ;in output buffer
        add si,256              ;in input buffer
        pop es
        pop bx
        pop cx
        loop bytesloop
        pop si
        pop cx
        inc si
        loop attrloop
        pop di
        pop si
        pop bp
        retf

;
;int lzw (table,output,data,handle)
;char *table,*output,*data;
;int handle;
;
_lzw:
        push bp
        mov bp,sp
        struc [bp]
        dw ?
        dd ?
table   dd ?
output  dd ?
datap2  dd ?
handle  dw ?
        ends
        push ds
        push di
        push si
        les bx,table
        push es
        pop ax
        mov cl,4
        add bx,0f
        shr bx,cl
        add ax,bx
        mov cs:tabseg,ax
        les bx,output
        mov cs:w[offset outp],bx
        mov cs:w[offset outp+2],es
        les bx,datap2
        mov cs:w[offset datap],bx
        mov cs:w[offset datap+2],es
        mov ax,handle
        mov cs:outh,ax
        mov cs:datal,49152
        call init_lzw
        call do_lzw
        call flush_buf
        jc writ_err
        call flush_buf
writ_err:
        mov ax,0
        if c dec ax
        pop si
        pop di
        pop ds
        pop bp
        retf

init_lzw:
        mov ax,cs:tabseg
        mov ds,ax
        les ax,cs:datap
        call init_table
        mov cs:outpb,0          ;bitcount
        mov cs:outc,0           ;bytecount
        ret

init_table:
        push ax
        push bx
        push cx
        xor bx,bx
        xor ax,ax
        mov cx,16
        mov dx,1                ;idcode
init_tablel:
        mov w[bx],17*6          ;wijs naar <EOI>, lege prefix
        mov w[bx+2],dx          ;idcode curr. string
        mov w[bx+4],ax
        add ax,17               ;kar++ en nummer++
        add bx,6                ;next prefix
        inc dx                  ;next idcode (++, want code++ en len'=len)
        loop init_tablel
        add bx,12               ;step over <CC> en <EOI>
        mov cs:next_table,bx
        mov bx,24576            ;begin pointer table
        xor ax,ax
        mov cx,18
init_ptable:
        mov [bx],ax
        add ax,6
        add bx,2
        loop init_ptable
        mov b[bx-4],17*6        ;<CC> wijst naar <EOI>, nu hoeft slechts op
                                ;1 waarde gechecked te worden
        mov cs:next_ptable,bx
        mov cs:next_code,17     ;eerste vrije code-1
        mov cs:codelength,5     ;5 bits
        mov cs:maxcodeval,32
        mov cs:firststep,32
        pop cx
        pop bx
        pop ax
        ret

do_lzw:
        mov ax,16               ;<CC>
        call output_ax
        mov si,cs:w[datap]      ;es:si wijst naar input charstream
        mov di,17*6             ;[.c.] is leeg ( <EOI> )
        mov cs:stringid,0       ;idcode van [.c.]
        mov cs:first_ptable,24576-2     ;eerste entry ptable (-2)
loop_lzw:
        mov ax,cs:datal
        dec ax
        mov cs:datal,ax
        cmp ax,0ffff
        jnz not_end
        mov ax,[di+4]
        mov cl,4
        shr ax,cl
        call output_ax          ;output final code for [.c.]
        jc ret
        mov ax,17
        call output_ax          ;output <EOI>
        ret

write_error:
        stc
        ret

not_end:
        mov al,es:[si]          ;haal K
        inc si
        xor ah,ah
        inc ax
        add cs:stringid,ax      ;update stringid want we zoeken naar [.c.]K
        dec ax
        mov bx,cs:first_ptable  ;1e entry ptable
        mov cx,cs:firststep     ;altijd macht van 2
        mov cs:adder,cx
;eerst di+6 uitproberen
        mov bp,di
        add bp,6
        cmp bp,cs:next_table
        jae find_entry0         ;di was hoogste
        mov ah,ds:[bp+4]        ;haal in ah & 0x0F het karakter
        and ah,0f
        cmp ah,al
        jnz find_entry0
        cmp ds:[bp],di          ;is [.c.] = [.c.]?
        jnz find_entry0
;gevonden!
        mov di,bp               ;[.c.] <- [.c.]K
        jmp short loop_lzw

find_entry0:
        add bx,cs:adder
find_entry1:
        cmp bx,cs:next_ptable
        jae too_high
        mov bp,[bx]
        cmp bp,17*6
        jz too_high
        mov cx,ds:[bp+2]
        cmp cx,cs:stringid
        ja too_high
        add bx,cs:adder
        shl cs:adder,1
        shl cs:firststep,1
        jmp short find_entry1
find_entry:
        add bx,cs:adder
        cmp bx,cs:cs:next_ptable
        jae too_high            ;boven phis. tabel
        mov bp,[bx]             ;haal pointer uit ptabel
        cmp bp,17*6             ;<EOI>
        jz too_high
        mov cx,ds:[bp+2]
        cmp cx,cs:stringid
        jnz too_hl
        mov ah,ds:[bp+4]        ;haal in ah & 0x0F het karakter
        and ah,0f
        cmp ah,al
        jnz too_hl
;nu telkens verder in de tabel zoeken totdat ofwel het einde gevonden
;wordt, ofwel ongelijke tekens gevonden worden. De ene tabel wordt
;nu aangewezen door [bp], de andere door di
        push di
        mov bp,ds:[bp]
        cmp bp,di
        jz found_eq
search_tab:
        cmp bp,17*6
        jz too_low_di           ;de gevonden prefix in de lijst houdt te snel op
        cmp di,17*6             ;De lijst gaat verder, maar ik houd op. Dit bete-
                                ;kent dat de lijst die NU ophoudt ook in de table
                                ;moet zitten. Gevonden, dus. Maar, [.c.]K moet
                                ;gevonden worden, dus: too_high
        jz too_high_di
        mov cl,[di+4]           ;haal K uit [.c.]
        mov ch,ds:[bp+4]        ;haal K uit prefixen tabel
        and cx,0f0f
        cmp cl,ch
        jnz too_hl_di
        mov di,[di]             ;haal nieuwe prefix
        mov bp,ds:[bp]
        jmp short search_tab

too_high_di:
        pop di
too_high:
        sub bx,cs:adder
        jmp short too_low

too_hl:
        jb too_low
        sub bx,cs:adder
        jmp short too_low
too_hl_di:
        ja too_high_di
too_low_di:
        pop di
too_low:
        mov cx,cs:adder
        shr cx,1
        cmp cx,1
        mov cs:adder,cx
        jnz find_entry
        jmp short not_in_list

found_eq:
        pop di
        mov di,[bx]
        mov cs:first_ptable,bx
        jmp short loop_lzw

not_in_list:
        ;
        ;add ([di]=[.c.]) (al) to ptabel, op plaats [bx]
        ;
        std
        push si
        push di
        mov si,cs:next_ptable
        mov di,si
        inc si
        inc si
        mov cs:next_ptable,si
        sub si,4
        mov cx,si
        sub cx,bx
        shr cx,1
        push es
        push ds
        pop es
        rep movsw
        pop es
        pop di
        pop si
        mov cx,cs:next_table
        mov [bx+2],cx                   ;zet pointer in ptable
        mov bx,cx
        mov [bx],di                     ;[.c.]
        mov dx,cs:stringid
        mov [bx+2],dx
        mov dx,cs:next_code
        inc dx
        mov cs:next_code,dx             ;store nieuwe code
        mov cl,4
        shl dx,cl
        or dl,al
        mov [bx+4],dx                   ;store code + K
        add bx,6
        mov cs:next_table,bx
        ;
        ;[.c.] <- K, dus di=6*al
        ;
        xor ah,ah
        push ax                         ;push ä code(s), oftewel <stringid-1>
        shl ax,1
        mov dx,ax
        shl ax,1
        add ax,dx
        push ax                         ;tijdelijk [.c.] op stack
        ;
        ;output code voor [.c.], dus (w[di+4] shr 4)
        ;
        mov ax,w[di+4]
        mov cl,4
        shr ax,cl
        call output_ax
        pop di
        pop ax
        jc ret
        inc ax                          ;root length, 1 karakter
        mov cs:stringid,ax              ;sla stringid van root op
        mov cs:first_ptable,24576-2
        jmp short loop_lzw
        ret

output_ax:
        mov cl,cs:outpb
        mov ch,cl
        cmp cl,4
        if a mov cl,4
        sub ch,cl
        shl ax,cl
        xor cl,cl
        or ch,ch
        jz shift_done
shft_again:
        rcl ax,1
        rcl cl,1
        dec ch
        jnz shft_again
shift_done:
        push es
        push bx
        les bx,cs:outp
        add bx,cs:outc
        or es:[bx],ax
        inc bx
        inc bx
        or es:[bx],cl
        pop bx
        pop es
        mov bx,cs:outc
        mov cl,cs:outpb
        add cl,cs:codelength
        mov al,cl
        and cl,07
        mov cs:outpb,cl
        mov cl,3
        shr al,cl
        xor ah,ah
        add bx,ax
        mov cs:outc,bx
        cmp bx,4080
        jbe no_flushing_today
        call flush_buf
        jc ret                          ;carry: output error
no_flushing_today:
        cmp cs:next_code,4093
        jnz no_cc
        mov cs:next_code,17
        mov ax,16
        call output_ax
        jc ret
        call init_table
        mov di,17*4                     ;[.c.] = leeg
no_cc:
        mov ax,cs:maxcodeval            ;2**n
        cmp cs:next_code,ax
        jb clc_ret
        inc cs:codelength
        shl cs:maxcodeval,1
clc_ret:
        clc
        ret

popf_stc_ret:
        popf
        stc
        ret
flush_buf:
        cmp cs:outc,4080
        pushf
        call flush_whole_blocks
        jc popf_stc_ret
        popf
        ja ret                          ;no carry
        mov ax,cs:outc
        cmp cs:outpb,0
        mov cs:outpb,0
        if nz inc ax
        cmp ax,0
        jz ret                          ;no carry
        mov cs:outc,ax
flush_buf_ax:
        push bx
        push cx
        push dx
        push si
        push di
        push ds
        push es
        mov cs:worksp,al
        push cs
        pop ds
        mov dx,offset worksp
        mov bx,cs:outh
        mov ah,040
        mov cx,1
        int 021
        jc error_writing
        cmp ax,1
        jc error_writing
        lds dx,cs:outp
        mov bx,cs:outh
        mov ah,040
        mov cl,cs:worksp
        xor ch,ch
        int 021
        jc error_writing
        cmp al,cs:worksp
        jc error_writing
        push ds
        pop es
        mov di,cs:w[offset outp]
        mov si,di
        mov al,cs:worksp
        xor ah,ah
        add si,ax
        mov cx,cs:outc
        sub cx,ax
        mov cs:outc,cx
        inc cx
        inc cx
        cld
        rep movsb
        mov cx,ax
        xor al,al
        rep stosb
        pop es
        pop ds
        pop di
        pop si
        pop dx
        pop cx
        pop bx
        clc
        ret

error_writing:
        pop es
        pop ds
        pop di
        pop si
        pop dx
        pop cx
        pop bx
        stc
        ret

flush_whole_blocks:
        mov ax,cs:outc
        cmp ax,255
        if b jmp clc_ret
        mov ax,255
        call flush_buf_ax
        jc ret
        jmp flush_whole_blocks




;
;int pcx (outputb,data,handle)
;char *outputb,*data;
;int handle;
;
_pcx:
        push bp
        mov bp,sp
        struc [bp]
        dw ?
        dd ?
outputb dd ?
datapx  dd ?
handlex dw ?
        ends
        push ds
        push es
        push si
        push di
        lds si,datapx
        les di,outputb
        cld
        mov cx,192
pcxloop:
        push cx
        push si
        mov dx,1
        call pcxline
        pop si
        push si
        mov dx,2
        call pcxline
        pop si
        push si
        mov dx,4
        call pcxline
        pop si
        mov dx,8
        call pcxline
        pop cx
        loop pcxloop
        lds dx,outputb
        sub di,dx
        mov cx,di
        mov bx,handlex
        mov ah,040
        int 021
        pop di
        pop si
        pop es
        pop ds
        pop bp
        ret

pcxline:
        mov cx,32
        call pcxbyte
pcxline0:
        mov bx,1
        dec cx
pcxline1:
        mov ah,al
        jcxz pcxline_put
        call pcxbyte
        cmp ah,al
        jne pcxline_put
        inc bx
        dec cx
        jmp pcxline1
pcxline_put:
        cmp bx,2
        jae pcxline_code
        cmp ah,0c0
        jae pcxline_code
        xchg ah,al
        stosb
        xchg ah,al
        jcxz ret
        jmp pcxline0
pcxline_code:
        push dx
        mov dx,bx
        cmp dx,03f
        if ae mov dx,03f
        or dl,0c0
        mov es:[di],dl
        inc di
        xchg ah,al
        stosb
        xchg ah,al
        and dl,03f
        sub bx,dx
        pop dx
        jne pcxline_code
        jcxz ret
        jmp pcxline0
        ret

pcxbyte:
        push bx
        push cx
        push ax
        mov bx,translate
        mov cx,8
pcxbit: lodsb
        cs:xlatb
        and al,dl
        dec al
        rol ax,1
        loop pcxbit
        mov bl,ah
        pop ax
        mov al,bl
        not al
        pop cx
        pop bx
        ret

translate:
        db 0,1,4,5,2,11,14,15,0,1,12,13,10,11,14,15



;
;Hier volgen de routines voor het behandelen van de Spectrum keywords.
;


;        do {
;                inp=*in;
;                while (((*(inp++))&0xDF)==*(keylist++)) {}
;                if (*(--keylist)=='.') {
;                        if (k>255) k-=75;
;                        *((*out)++)=k;
;                        *in=inp;
;                        return (1);
;                }
;                do {} while (*(keylist++)!='.');
;                k++;
;        } while (*keylist!='-');


;
;findkeyword (char **inp,int *k)
;

_FINDKEYWORD:
        PUSH BP
        MOV BP,SP
        STRUC [BP]
        DW ?
        DD ?
INP     DD ?
K       DD ?
        ENDS
        PUSH SI
        PUSH DI

        PUSH DS
        LDS SI,K
        MOV W[SI],0
        LDS SI,INP
        LDS SI,[SI]
        PUSH CS
        POP ES
        MOV DI,OFFSET KEYLIST
        CLD
        LODSB
        DEC SI
        CMP AL,'>'
        JZ KEYLOOP
        CMP AL,'<'
        JZ KEYLOOP
        CMP AL,'A'
        JB EXIT
        CMP AL,'Z'
        JA EXIT
        MOV CX,0FFFF
KEYLOOP:
        PUSH SI
        REPZ CMPSB
        MOV AL,'.'
        CMP ES:B[DI-1],AL
        JZ FOUNDIT
        POP SI
        REPNZ SCASB
        INC DI
        CMP ES:B[DI],'-'
        JNZ KEYLOOP
        JMP EXIT

FOUNDIT:MOV BL,ES:[DI]
        XOR BH,BH
        LDS DI,K
        MOV [DI],BX
        DEC SI
        LDS DI,INP
        MOV [DI],SI
        POP SI

EXIT:   POP DS
        POP DI
        POP SI
        POP BP
        RETF

LEAD_SPACE      DB 0
;
;int listchar(char **in,char **out);
;
_LISTCHAR:
        PUSH BP
        MOV BP,SP
        PUSH SI
        PUSH DI
        STRUC [BP]
        DW ?
        DD ?
INP2    DD ?
OUTPT   DD ?
        ENDS
        LES BX,INP2
        LES BX,ES:[BX]
        MOV AL,ES:[BX]
        INC BX
        LES SI,INP2
        MOV ES:[SI],BX
        CMP AL,0D
        JNZ NOEND
        LES BX,OUTPT
        LES BX,ES:[BX]
        MOV ES:W[BX],0A0D
        INC BX
        INC BX
        LES SI,OUTPT
        MOV ES:[SI],BX
        MOV CS:LEAD_SPACE,0
        MOV AX,0FFFF                    ;NONZERO: EOLN
        JMP LONG LCEXIT

NOEND:
        CMP AL,020
        JAE PRINTABLE
        MOV AL,'?'
PRINTABLE:
        CMP AL,165
        JAE TOKEN
        CMP AL,128
        IF AE MOV AL,'?'
        LES BX,OUTPT
        LES BX,ES:[BX]
        MOV ES:[BX],AL
        INC BX
        LES SI,OUTPT
        MOV ES:[SI],BX
        CMP AL,020
        MOV AL,0FF
        IF Z MOV AL,0                   ;0=NO LEAD. SPACE
        MOV CS:LEAD_SPACE,AL
        XOR AX,AX
        JMP LONG LCEXIT

TOKEN:  LES BX,OUTPT
        LES BX,ES:[BX]
        PUSH ES
        PUSH CS
        POP ES
        MOV DI,OFFSET KEYLIST
        MOV CX,0FFFF
        CLD
        REPNZ SCASB
FIND_START:
        DEC DI
        CMP ES:B[DI-1],128
        JB FIND_START
        POP ES
        MOV CL,AL
        CMP AL,020+165
        JB TR_TOK                       ;NO LEADING SPACE
        CMP CS:B[DI],'A'
        JB TR_TOK
        CMP CS:LEAD_SPACE,0
        JZ TR_TOK
        MOV ES:B[BX],020
        INC BX
TR_TOK: MOV AL,CS:[DI]
        CMP AL,'.'
        JZ TR_END
        MOV ES:[BX],AL
        INC DI
        INC BX
        JMP TR_TOK
TR_END: MOV CS:LEAD_SPACE,0FF
        CMP CS:B[DI-1],'$'
        JZ MAYTRAIL
        CMP CS:B[DI-1],'A'
        JB NOTRAIL
MAYTRAIL:
        CMP CL,168
        JB NOTRAIL
        MOV CS:LEAD_SPACE,0             ;SPACE=NO LEADING SPACE
        MOV ES:B[BX],020
        INC BX
NOTRAIL:
        LES SI,OUTPT
        MOV ES:[SI],BX
        XOR AX,AX
LCEXIT:
        POP DI
        POP SI
        POP BP
        RETF



        DB '255'
KEYLIST:
        DB 'VERIFY.',214,'BEEP.',215,'CIRCLE.',216,'PAPER.',218,'FLASH.',219,'BRIGHT.',220,'OVER.',222,'OUT.',223
        DB 'LPRINT.',224,'LLIST.',225,'STOP.',226,'READ.',227,'DATA.',228,'RESTORE.',229,'NEW.',230,'BORDER.',231
        DB 'CONTINUE.',232,'DIM.',233,'REM.',234,'GO TO.',236,'GO SUB.',237,'LOAD.',239,'LIST.',240,'LET.',241
        DB 'PAUSE.',242,'NEXT.',243,'POKE.',244,'PRINT.',245,'PLOT.',246,'RUN.',247,'SAVE.',248,'RANDOMIZE.',249,'IF.',250
        DB 'CLS.',251,'DRAW.',252,'CLEAR.',253,'RETURN.',254,'COPY.',255

        DB 'ATTR.',171,'ATN.',183,'AT.',172,'FORMAT.',208,'FOR.',235,'VAL$.',174,'VAL.',176,'INKEY$.',166
        DB 'INPUT.',238,'INK.',217,'INT.',186,'INVERSE.',221,'IN.',191

        DB 'RND.',165,'PI.',167,'FN.',168,'POINT.',169,'SCREEN$.',170,'TAB.',173,'CODE.',175,'LEN.',177,'SIN.',178,'COS.',179,'TAN.',180,'ASN.',181
        DB 'ACS.',182,'ATN.',183,'LN.',184,'EXP.',185,'SQR.',187,'SGN.',188,'ABS.',189,'PEEK.',190,'USR.',192,'STR$.',193,'CHR$.',194
        DB 'NOT.',195,'BIN.',196,'OR.',197,'AND.',198,'<=.',199,'>=.',200,'<>.',201,'LINE.',202,'THEN.',203,'TO.',204,'STEP.',205
        DB 'DEF FN.',206,'CAT.',207,'MOVE.',209,'ERASE.',210,'OPEN #.',211,'CLOSE #.',212,'MERGE.',213,'-'

CONVERT_TEXT ENDS
