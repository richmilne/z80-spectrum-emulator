;
;   This file is part of the registered Spectrum emulator package 'Z80'
;   version 2.01, and may not be distributed.  You may use this source for
;   other PC based Spectrum or Z80 emulators only after permission.  It is
;   however permitted to use this source file or parts thereof for Spectrum
;   or Z80 emulators on non-PC based machines, provided that the source is
;   acknowledged.
;
;                                                       Gerton Lunter, 3/5/93

startup segment para public

oldversionload equ 1

;
;Contains the microdrive support routines (see also XTRA.C), and
;the RS232 support routines. Also contains much of the IN/OUT handling
;routines.
;
;Several memory handling routines have been transferred from misc.8 to
;here.
;

BUFSIZE EQU 256                 ;OOK IN Z80.8 !!!!!

IN_IF1: AND BL,011000XB
        CMP BL,010000XB
        JZ STATUS
        CMP BL,011000XB
        if Z jmp mdrv_in
        CMP BYTE CS:RS_IN,2
        JAE READ_BIT
        MOV BYTE CS:RS_IN,0
        CMP BYTE CS:CTS,0       ;CLEAR TO SEND?
        JZ READ_BIT             ;NEE, GEEF NUL TERUG
        CALL RS_READ_READY      ;STAAT DATA KLAAR?
        JC READ_BIT             ;C=NEE
        PUSH AX
        CALL READ_SAVEREG
        MOV AH,0F1              ;VIER START BITS EN 1 MARKER BIT
        NOT AL
        ROL AX,1
        ROL AX,1
        ROL AX,1
        ROL AX,1
        MOV CS:RS_IN,AX
        POP AX
READ_BIT:
        XOR AH,AH
        RCR WORD CS:RS_IN,1
        RCR AH,1                ;HOGE BIT=RS232 BIT, LAGE BIT=0 (NETWORK)
        RET


STATUS: cmp byte cs:mdrvhandle,0
        jz status_nomdrv
        mov bx,cs:w[offset gapcnt]
        inc bx
        mov cs:w[offset gapcnt],bx
        shr bl,1
        shr bl,1
        and bl,2+4                      ;SYNC and GAP
        cmp byte cs:mdrvgap,0
        jz status_nogap
        and bl,2
        and bh,1                        ;Otherwise, first wait 256 IN's
        jz status_nogap
        mov word cs:gapcnt,0
        call mdrv_increase              ;Read next block
status_nogap:
        xor bl,4
        mov bh,cs:b[offset mdrvwritprot]
        and bh,1
status_nomdrv1:
        MOV ah,CS:B[OFFSET DTR]
        and ah,8
        or ah,bh
        or ah,bl
        RET
status_nomdrv:
        mov bx,6
        jmp status_nomdrv1


IN_0_CRASH:
        mov byte cs:c_active,0
        mov byte cs:c_action_code,0fd   ;in 0 crash
        RET                             ;Actual calling of C is done in ed.8

ED_GETRSBYTE:
        CALL RS_READ_READY
        MOV AH,64
        JC RZ
        CALL READ_SAVEREG
        MOV AH,1
RZ:     RETf

READ_SAVEREG:
        PUSH BX
        PUSH CX
        PUSH DX
        PUSH DI
        PUSH SI
        PUSH BP
        PUSH DS
        PUSH ES
        MOV AX,CS:RSCOUNT
        ADD AX,1
        SBB AX,0
        MOV CS:RSCOUNT,AX
        CALL READ_RS_BYTE       ;HAAL BYTE IN AL (VAN DISK OF COMn)
        POP ES
        POP DS
        POP BP
        POP SI
        POP DI
        POP DX
        POP CX
        POP BX
        RET

OUT_IF1:
        AND BL,011000XB
        CMP BL,010000XB
        JZ CONTROL
        CMP BL,011000XB
        if z jmp mdrv_out
        CMP BYTE CS:COMSDAT,0FF
        JNZ IGNORE_NET
        SHR AH,1
        RCR WORD CS:RS_OUT,1
        TEST WORD CS:RS_OUT,080
        JZ IGNORE_NET
        PUSH AX
        MOV AL,CS:B[OFFSET RS_OUT+1]
        CALL WRITE_SAVEREG
        MOV WORD CS:RS_OUT,0
        POP AX
IGNORE_NET:
        RET

ED_SENDRSBYTE:
        MOV AL,CL
        CALL WRITE_SAVEREG
        RETf

WRITE_SAVEREG:
        PUSH BX
        PUSH CX
        PUSH DX
        PUSH DI
        PUSH SI
        PUSH BP
        PUSH ES
        PUSH DS
        NOT AL
        CALL WRITE_RS_BYTE
        MOV AX,CS:RSOUTCOUNT
        ADD AX,1
        SBB AX,0
        MOV CS:RSOUTCOUNT,AX
        POP DS
        POP ES
        POP BP
        POP SI
        POP DI
        POP DX
        POP CX
        POP BX
        RET

CONTROL:
        mov byte cs:mdrv_counter,0
        mov bh,cs:old_if1ctrl
        xor bh,ah
        mov cs:old_if1ctrl,ah
        and bh,15
        if nz call mdrv_flushbuf
        SHR AH,1                ;COMMS DATA
        rcr AH,1                ;COMMS CLK (save comms data temporarily)
        sbb bx,bx
        dec bl
        xchg bh,cs:comsclk
        cmp bl,bh               ;z if 1->0
        jnz do_not_clock_in
        mov bh,cs:comsdat       ;old commsdat: OUT 239,0 turns on mdrv motor!
        shr bh,1
        cmc
        rcl cs:b[motors],1      ;shift bit in motorbyte
        mov cs:byte dataread,0
        mov cs:byte datawritten,0
        push ax
        call mdrv_update        ;to update mdrvwritprot and others
        pop ax
do_not_clock_in:
        shl ah,1                ;get comms data bit
        SBB BH,BH
        MOV CS:COMSDAT,BH
        shr ah,1
        SHR AH,1                ;R/_W
        sbb bh,bh
        mov cs:readwrt,bh
        SHR AH,1                ;ERASE
        sbb bh,bh
        mov cs:erase,bh
        SHR AH,1                ;CTS
        SBB BH,BH
        MOV CS:CTS,BH
        MOV WORD CS:RS_OUT,0    ;Reset any 'glitch' bits that may have collected
        mov word cs:gapcnt,0    ;reset gap counter
        RET

RS_READ_READY:                  ;BYTE KLAAR? C=NEE
        CMP BYTE CS:INMODE,2
        JZ RS_R_R_COM
        CMP BYTE CS:INMODE,3
        JZ RS_R_R_DISK
        STC
        RET
RS_R_R_DISK:
        CMP WORD CS:INNUM,1     ;HANDLE=0?
        JC RET
        PUSH BX
        MOV BX,CS:GETIN
        CMP BX,CS:PUTIN
        POP BX
        CLC
        JNZ RET
        CALL DISK_READ_BLOCK    ;UPDATE VAN PUTIN EN GETIN; C=MISLUKT
        RET
RS_R_R_COM:
        PUSH BX
        MOV BX,CS:GETIN
        CMP BX,CS:PUTIN
        IF NZ STC
        CMC
        POP BX
        RET

READ_RS_BYTE:
        XOR AL,AL
        CMP BYTE CS:INMODE,2
        JB RET
        CMP BYTE CS:INMODE,3
        JA RET
        MOV BX,CS:GETIN
        MOV AL,CS:[BX]
        INC BX
        CMP BX,OFFSET INBUF+BUFSIZE
        IF Z MOV BX,OFFSET INBUF
        MOV CS:GETIN,BX
        RET

WRITE_RS_BYTE:
        MOV BX,CS:PUTOUT
        MOV CS:[BX],AL
        INC BX
        CMP BX,OFFSET OUTBUF+BUFSIZE
        IF AE SUB BX,BUFSIZE
        MOV CS:PUTOUT,BX
        CALL UPDAT_DTR
        AND AH,AH
        JNZ RET
        CMP BYTE CS:OUTMODE,3
        JNZ RET                         ;3=SCHRIJF NAAR DISK
        PUSH AX
        PUSH BX
        PUSH CX
        PUSH DS
        PUSH DX
WRIT_RETRY:
        MOV AH,040
        MOV BX,CS:OUTNUM
        MOV CX,BUFSIZE-1
        MOV DX,OFFSET OUTBUF
        PUSH CS
        POP DS
        INT 021
        JC ERROR_WRITING
        CMP AX,0
        JZ ERROR_WRITING
        PUSH CS
        PUSH CS
        POP DS
        POP ES
        MOV DI,OFFSET OUTBUF
        MOV SI,DI
        ADD SI,AX
        MOV CX,BUFSIZE-1
        SUB CX,AX
        MOV AX,CX
        CLD
        REP MOVSB
        ADD AX,OFFSET OUTBUF
        MOV CS:PUTOUT,AX
        MOV WORD CS:GETOUT,OFFSET OUTBUF
        CALL UPDAT_DTR
        JMP SHORT EXIT_WRIT_DSK
ERROR_WRITING:
        MOV AL,0FC                      ;ERROR DURING WRITING
        CALL CALL_C
        CMP AL,0
        JNZ WRIT_RETRY
        MOV BYTE CS:OUTMODE,0           ;CLOSE OUTPUT CHANNEL
EXIT_WRIT_DSK:
        POP DX
        POP DS
        POP CX
        POP BX
        POP AX
        RET
UPDAT_DTR:
        PUSH BX
        MOV BX,CS:PUTOUT
        INC BX
        CMP BX,OFFSET OUTBUF+BUFSIZE
        IF Z MOV BX,OFFSET OUTBUF
        CMP BX,CS:GETOUT
        MOV AH,0FF
        IF Z XOR AH,AH
        MOV CS:DTR,AH
        POP BX
        RET

UPDATE_DTR:                             ;LEEGT EVT. BUFFER
        PUSH SI
        PUSH DI
        PUSH ES
        PUSH DS
        PUSH DS
        POP ES
        MOV BX,CS:GETOUT
        CMP BYTE CS:OUTMODE,2
        JA END_UPDDTR                   ;DISK:VERSTUUR NIETS, UPDATE DTR
        CALL WRIT_BYTE_READY            ;CARRY=READY
        JNC END_UPD_DTR
U_DTR_L1:
        CMP BX,CS:PUTOUT
        JZ END_UPDDTR
        MOV AL,CS:[BX]
        CALL WRIT_BYTE
        INC BX
        CMP BX,OFFSET OUTBUF+BUFSIZE
        IF Z MOV BX,OFFSET OUTBUF
        MOV CX,128
WAIT_READY:
        CALL WRIT_BYTE_READY
        JC U_DTR_L1
        LOOP WAIT_READY
END_UPDDTR:
        MOV CS:GETOUT,BX
        MOV CX,CS:PUTOUT
        INC CX
        CMP CX,OFFSET OUTBUF+BUFSIZE
        IF Z MOV CX,OFFSET OUTBUF
        CMP BX,CX
        MOV AH,0FF
        IF Z XOR AH,AH
        MOV CS:DTR,AH
END_UPD_DTR:
        POP DS
        POP ES
        POP DI
        POP SI
        RET

WRIT_BYTE_READY:
        MOV DX,CS:OUTNUM
        CMP BYTE CS:OUTMODE,2
        JZ COMN
        MOV AH,2
        INT 017
        RCL AH,1
        RET
COMN:   MOV AH,3
        INT 014
        AND AX,02010
        XOR AX,02010
        CMP AX,1
        RET

WRIT_BYTE:
        MOV DX,CS:OUTNUM
        CMP BYTE CS:OUTMODE,2
        JZ COMNW
        XOR AH,AH
        INT 017
        RET
COMNW:  MOV AH,1
        INT 014
        RET

UPDATE_BUFSTATUS:               ;ALLEEN VOOR COMN
        CMP BYTE CS:INMODE,2
        JNZ RET
        PUSH DX
        MOV DX,CS:COMPORT
        PUSH AX
        MOV AX,CS:GETIN
        DEC AX
        SUB AX,CS:PUTIN
        IF B ADD AX,BUFSIZE
        CMP AX,15
        MOV AL,9
        IF B XOR AL,AL
        ADD DX,4
        OUT DX,AL
        POP AX
        POP DX
        RET

GETSENTBYTE:
        PUSH AX
        PUSH DX
        MOV DX,CS:COMPORT
        ADD DX,5
        IN AL,DX
        AND AL,1
        JZ COM_ERROR
        SUB DX,5
        IN AL,DX
        PUSH BX
        MOV BX,CS:PUTIN
        MOV CS:[BX],AL
        INC BX
        CMP BX,OFFSET INBUF+BUFSIZE
        IF Z MOV BX,OFFSET INBUF
        MOV CS:PUTIN,BX
        MOV AX,CS:GETIN
        SUB AX,BX
        POP BX
        IF B ADD AX,BUFSIZE
        CMP AX,15
        MOV AL,9
        IF B XOR AL,AL
        ADD DX,4
        OUT DX,AL
        INC DX
COM_ERROR:
        INC DX
        IN AL,DX
        STI
        MOV AL,020
        OUT 020,AL
        POP DX
        POP AX
        IRET

DISK_READ_BLOCK:
        PUSH AX
        PUSH BX
        PUSH CX
        PUSH DX
        PUSH DS
READ_RETRY:
        MOV AH,03F
        MOV BX,CS:INNUM
        MOV CX,BUFSIZE-1
        MOV DX,OFFSET INBUF
        PUSH CS
        POP DS
        INT 021
        JC ERROR_READ
        MOV WORD CS:GETIN,OFFSET INBUF
        ADD AX,OFFSET INBUF
        MOV CS:PUTIN,AX
        CMP AX,OFFSET INBUF+1
EXIT_READ:
        POP DS
        POP DX
        POP CX
        POP BX
        POP AX
        RET
ERROR_READ:
        MOV AL,0FB                      ;ERROR DURING READING
        CALL CALL_C
        CMP AL,1
        JZ READ_RETRY
        MOV AH,03E
        MOV BX,CS:INNUM
        INT 021
        MOV BYTE CS:INMODE,0
        JMP EXIT_READ

FLUSHOUTPUT:
        PUSH DS
        MOV DS,CS:SPECSEG
        CALL UPDATE_DTR
        MOV AX,0FFFF
        CMP BYTE CS:OUTMODE,3
        JNZ NODISK
        MOV AH,040
        MOV BX,CS:OUTNUM
        MOV CX,CS:PUTOUT
        SUB CX,CS:GETOUT
        IF B ADD CX,BUFSIZE
        MOV DX,OFFSET OUTBUF
        PUSH CS
        POP DS
        PUSH CX
        INT 021
        POP CX
        IF NC CMP AX,CX
        MOV AX,0FFFF
        IF C INC AX
NODISK: POP DS
        RET

CLEARINPUT:
        MOV WORD CS:GETIN,OFFSET INBUF
        MOV WORD CS:PUTIN,OFFSET INBUF
        RET

SHELL_FLUSHBUF:
        MOV AX,0FFFF
        CMP CS:OUTMODE,3
        JNZ NODISKOUTPUT
        MOV AH,045
        MOV BX,CS:OUTNUM
        INT 021
        MOV BX,AX
        MOV AX,0
        JC NODISKOUTPUT
        PUSH BX
        MOV AH,040
        MOV CX,CS:PUTOUT
        SUB CX,CS:GETOUT
        IF B ADD CX,BUFSIZE
        MOV DX,OFFSET OUTBUF
        PUSH CS
        POP DS
        INT 021
        POP BX
        MOV CX,0
        IF NC DEC CX
        PUSH CX
        MOV AH,03E
        INT 021
        POP AX
        IF C MOV AX,0FFFF
        MOV WORD CS:GETOUT,OFFSET OUTBUF
        MOV WORD CS:PUTOUT,OFFSET OUTBUF
        MOV BYTE CS:DTR,0FF
NODISKOUTPUT:
        RET

CALL_C: CLI
        PUSH DS
        MOV DS,CS:SPECSEG
        MOV CS:C_ACTION_CODE,AL
        MOV WORD CS:TRAPADR,OFFSET CALL_C_RETURN
        MOV WORD CS:TRAPSEG,SEG CALL_C_RETURN
        JMP ENTER_C
CALL_C_RETURN:
        MOV AX,CS:VALUE
        POP DS
        STI
        RET



mdrv_update:                    ;Updates several internal variables
        xor bx,bx
        mov ah,cs:motors
        mov al,0ff
mdrv_gh_find:
        inc al
        shr ah,1
        jc mdrv_gh_found
        cmp al,7
        jb mdrv_gh_find
        jmp mdrv_gh_writprot    ;error (all motors off)
mdrv_gh_found:
        test ah,ah
        jnz mdrv_gh_writprot    ;error (more than 1 motor on)
        mov bl,al
        mov al,cs:[bx+offset writprot]  ;<>0 = write protected
        sub al,1                        ;c=1: wprot
        sbb al,al                       ;ff=wrprot, 00=not
        mov cs:mdrvwritprot,al
        add bl,bl
        mov bx,cs:[bx+offset mhandles]
mdrv_gh_writprot:
        mov cs:mdrvhandle,bx
        test bx,bx
        jnz ret
        mov cs:mdrvwritprot,0
        ret



mdrv_flushbuf:                  ;writes mdrv buffer to cartridge file,
                                ;resets read/write pointer and
                                ;moves the tape forward if neccesary.
                                ;Also loads next block if neccesary
        cmp word cs:mdrvpointer,0
        jz mdrv_fb_load         ;nothing to write or buffer empty
        cmp byte cs:dataread,0ff
        jz mdrv_increase        ;data in buffer is old
        cmp byte cs:readwrt,0
        jnz ret                 ;buffer full of fresh read-data, or GAP
        call mdrv_savebuf
mdrv_increase:                  ;increases mdrvblock etc.
        mov word cs:mdrvpointer,0
        mov byte cs:mdrvgap,0
        cmp byte cs:mdrvheader,0
        mov byte cs:mdrvheader,0
        jnz mdrv_fb_load
        mov byte cs:mdrvheader,0ff
        push ax
        mov al,byte cs:mdrvblock
        inc al
        cmp al,254              ;Cartridge of 127K
        if ae xor al,al         ; (The If.1 rom can't handle 128K cartridges)
        mov cs:mdrvblock,al
        pop ax
mdrv_fb_load:
        cmp byte cs:readwrt,0
        jz ret                  ;writing
        push ax
        push bx
        push cx
        push dx
        push es
        push si
        call mdrv_getbuffer
        jc mdrv_fb_l_nodata
        mov cx,15
        cmp byte cs:mdrvheader,0
        jnz mdrv_fb_header
        add bx,cx
        mov cx,528
mdrv_fb_header:
        mov si,offset mdrvbuffer
        shr cx,1
        pushf
mdrv_fb_l_transfer:
        mov ax,es:[bx]
        mov cs:[si],ax
        inc bx
        inc bx
        inc si
        inc si
        loop mdrv_fb_l_transfer
        popf
        jnc mdrv_fb_l_nodata
        mov al,es:[bx]
        mov cs:[si],al
mdrv_fb_l_nodata:               ;Now check whether this block represents a GAP
        pop si                  ; or bona fide data. Do this by checking the
        pop es                  ; checksum of the first 14 bytes
        mov bx,offset mdrvbuffer
        mov cx,14
        xor al,al
mdrv_fb_checksum:
        add al,cs:[bx]
        adc al,1
        if nz dec al            ;This will never give 0FF
        inc bx
        loop mdrv_fb_checksum
        sub al,cs:[bx]
        mov cs:mdrvgap,al       ;<>0 if GAP
        mov word cs:mdrvpointer,1       ;Signal: data (or GAP) in buffer
        mov byte cs:dataread,0
mdrv_fbl_carterr:
        pop dx
        pop cx
        pop bx
        pop ax
        ret

mdrv_fb_err:
        pop ds
        mov al,0ef              ;mdrv error
        call call_c             ;Give message and continue
        pop dx
        pop cx
        pop bx
        pop ax
        ret

mdrv_savebuf:
        cmp word cs:mdrvpointer,0200
        if a mov byte cs:mdrvheader,0
        mov word cs:mdrvpointer,0
        mov byte cs:mdrvgap,0
        cmp byte cs:mdrvwritprot,0
        jz ret
        cmp byte cs:datawritten,0ff
        jnz ret
        mov byte cs:datawritten,0
        push ax
        push bx
        push cx
        push dx
        push es
        push si
        call mdrv_getbuffer
        jc mdrv_fb_carterr
        mov cx,15
        cmp byte cs:mdrvheader,0
        jnz mdrv_sb_header
        add bx,cx
        mov cx,528
mdrv_sb_header:
        mov si,offset mdrvbuffer+12
        shr cx,1
        pushf
mdrv_sb_transfer:
        mov ax,cs:[si]
        mov es:[bx],ax
        inc si
        inc si
        inc bx
        inc bx
        loop mdrv_sb_transfer
        mov byte cs:mdrvbufchanged,0ff
        popf
        jnc mdrv_fb_carterr
        mov al,cs:[si]
        mov es:[bx],al
mdrv_fb_carterr:
        pop si
        pop es
        pop dx
        pop cx
        pop bx
        pop ax
        ret


mdrv_getbuffer:                 ;Loads 1/8th of cartridge if neccessary, and
        mov bx,cs:mdrvhandle    ;returns es:bx pointer in mdrv buffer
        test bx,bx
        jz mdrv_clearbuffer     ;c=1: error
        cmp bx,cs:mdrvbufhandle
        jnz mdrv_gb_loadbuf
mdrv_gb_frommemory:
        mov al,cs:mdrvblock
        sub al,cs:mdrvbufblock
        jc mdrv_gb_loadbuf
        cmp al,31
        ja mdrv_gb_loadbuf
        mov ah,136              ;0220/4
        mov bl,al
        xor bh,bh
        mul ah
        add ax,ax
        add ax,ax
        sub ax,bx               ;*021F
        mov bx,ax
        mov es,cs:mdrvseg
        ret
mdrv_gb_loadbuf:
        push bx
        call mdrv_clearbuffer
        pop bx
mdrv_gb_nochange:
        mov cs:mdrvbufhandle,bx
        mov al,cs:mdrvblock
        and al,255-31
        mov cs:mdrvbufblock,al
        call mdrv_gb_lseek
        mov ah,03f
        mov cx,17376            ;32*021f. The final block will consist of only
        xor dx,dx               ; 30 header/data blocks, but that's no problem.
        push ds
        mov ds,cs:mdrvseg
        int 021
        pop ds
        jmp mdrv_gb_frommemory

mdrv_gb_lseek:
        mov al,cs:mdrvbufblock
        xor ah,ah
        mov dx,021F
        mul dx
        mov cx,dx
        mov dx,ax
        mov ax,04200
        int 021
        ret

mdrv_clearbuffer:
        mov bx,cs:mdrvbufhandle
        test bx,bx
        jz mdrv_buffererr
        cmp byte cs:mdrvbufchanged,0
        jz mdrv_buffererr
        call mdrv_gb_lseek
        mov ah,040
        push ds
        mov ds,cs:mdrvseg
        xor dx,dx
        mov cx,17376                    ;32 * 021F
        cmp byte cs:mdrvbufblock,224    ;final block
        if z mov cx,16290               ;30 * 021F
        int 021
        pop ds
        mov byte cs:mdrvbufchanged,0
        mov word cs:mdrvbufhandle,0
mdrv_buffererr:
        stc
        ret



mdrv_writegap:                  ;called by the timer, to emulate OUT 239,0
        cmp byte cs:erase,0
        jnz ret
        mov byte cs:[offset mdrvbuffer+14],0ff   ;Always-wrong checksum
        mov word cs:mdrvpointer,15
        mov byte cs:datawritten,0ff
        mov byte cs:dataread,0
        push word cs:readwrt
        mov byte cs:readwrt,0
        call mdrv_flushbuf
        mov byte cs:datawritten,0ff
        mov byte cs:mdrvpointer,15
        call mdrv_flushbuf
        pop word cs:readwrt
        ret

mdrv_otir:
        test word cs:mdrvhandle
        jnz mdrv_otirok
        mov bl,0fd
        jmp far call_c_immediately
mdrv_otirok:
        cmp cs:byte datawritten,0
        if z mov word cs:mdrvpointer,0
        mov byte cs:mdrv_counter,0
        mov byte cs:mdrvgap,0
        push ax
        push bx
        push cx
        push dx
        cmp byte cs:readwrt,0
        jnz mdrv_otir_return
        cmp byte cs:erase,0
        jnz mdrv_otir_return
        pop bx                  ;HL
        pop cx                  ;BC
        push cx
        push bx
        push si
        mov si,cs:mdrvpointer
mdrv_otir1:
        mov al,[bx]
        mov cs:[si+offset mdrvbuffer],al
        inc bx
        cmp si,021f
        adc si,0
        dec ch
        jnz mdrv_otir1
        mov cs:mdrvpointer,si
        pop si
        mov byte cs:datawritten,0ff
mdrv_otir_return:
        pop dx
        pop cx
        mov bl,ch
        dec bl
        xor bh,bh
        add dx,bx               ;update HL
        inc dx
        mov ch,1
        pop bx
        pop ax
        sahf
        dec ch                  ;update B and flags
        lahf
        jmp far emulate

mdrv_out:
        test word cs:mdrvhandle
        if z jmp in_0_crash
        cmp cs:byte datawritten,0
        if z mov word cs:mdrvpointer,0
        mov byte cs:mdrv_counter,0
        mov byte cs:mdrvgap,0
        cmp byte cs:readwrt,0
        jnz mdrv_out_return
        cmp byte cs:erase,0
        jnz mdrv_out_return
        mov bx,cs:mdrvpointer
        mov cs:[bx+offset mdrvbuffer],ah
        cmp bx,021f
        adc bx,0
        mov cs:mdrvpointer,bx
        mov byte cs:datawritten,0ff
mdrv_out_return:
        ret

mdrv_inir:
        test word cs:mdrvhandle
        jnz mdrv_inirok
        mov bl,0fd                              ;in 0 crash
        jmp far call_c_immediately
mdrv_inirok:
        push ax
        mov bx,dx
        cmp word cs:mdrvpointer,0
        je mdrv_inir_rubbish
        cmp byte cs:mdrvgap,0
        jnz mdrv_inir_rubbish
        cmp byte cs:readwrt,0ff
        jnz mdrv_inir_rubbish
        cmp byte cs:erase,0ff
        jnz mdrv_inir_rubbish
        push si
        mov si,cs:mdrvpointer
mdrv_inir1:
        mov al,cs:[si+offset mdrvbuffer-1]      ;compensate for the flag-'1'
        cmp bx,04000
        if ae mov [bx],al
        inc bx
        inc dx
        cmp si,021f
        adc si,0
        dec ch
        jnz mdrv_inir1
        mov cs:mdrvpointer,si
        pop si
        mov byte cs:dataread,0ff
        mov al,0f
        xor cs:old_if1ctrl,al           ;Force call to mdrv_flushbuf upon
        jmp mdrv_inir_return            ;the OUT to EF.
mdrv_inir_rubbish:
        cmp bx,04000
        if ae mov b[bx],0
        inc bx
        inc dx
        dec ch
        jnz mdrv_inir_rubbish
mdrv_inir_return:
        pop ax
        sahf
        mov ch,1
        dec ch
        lahf
        jmp far emulate

mdrv_in:
        test word cs:mdrvhandle
        if z jmp in_0_crash
        cmp word cs:mdrvpointer,0
        je mdrv_in_rubbish
        cmp byte cs:mdrvgap,0
        jnz mdrv_in_rubbish
        cmp byte cs:readwrt,0ff
        jnz mdrv_in_rubbish
        cmp byte cs:erase,0ff
        jnz mdrv_in_rubbish
        mov bx,cs:mdrvpointer
        mov ah,cs:[bx+offset mdrvbuffer-1]
        cmp bx,021f
        adc bx,0
        mov cs:mdrvpointer,bx
        mov byte cs:dataread,0ff
        mov bl,0f
        xor byte cs:old_if1ctrl,bl
        ret
mdrv_in_rubbish:
        mov byte cs:dataread,0ff
        xor ah,ah
        ret


mdrv_closeall:
        call mdrv_clearbuffer
        mov cx,8
        mov bx,offset mhandles
mdrv_c_loop:
        mov ax,cs:[bx]
        inc bx
        inc bx
        test ax,ax
        jz mdrv_c_next
        push bx
        mov bx,ax
        mov ah,03e
        int 021
        pop bx
mdrv_c_next:
        loop mdrv_c_loop
        ret



