startup segment word public

;Contains routines to read and interpret .VOC files


in_voc_far:
        push cx
        push dx
ivf_reentry:
        mov ax,w[offset _tstatehi]
        sub ax,w[offset _lastthi]
        if b jmp ivf_readlast
        mov dx,cs:tquarter
        mul dx
        add ax,w[offset _lasttlo]
        adc dx,0
        sub ax,w[offset _tstates]
        sbb dx,0                        ;Now dxax contains # T states after end
        jae ivf_skip                    ; of latest used voc sample
ivf_readlast:
        mov bx,w[offset _vocdatapoint]
        pop dx
        pop cx
        mov ds,w[offset vocbufseg]
        pop ax
        mov ah,b[bx]
        pop ds
        shr ah,1
        or ah,191
        mov es:lastvocbit,ah
        mov bx,in_tab
        jmp far in_fe_continued


ivf_skip:
        inc dx
        cmp dx,w[offset _srate]
        jb ivf_dodiv
        mov dx,_srate                   ;Skip less, and skip the rest next time
        dec dx
ivf_dodiv:
        dec dx
        div word _srate                 ;AX=# samples to skip
        inc ax                          ;AX=# samples to move on
        test w[offset _voctoreadhi]     ;more than 64K to read?
        jne skipthis                    ;Yes, then we can skip ax bytes
        mov bx,w[offset _vocdatalen]    ;Bytes currently in buffer, minus
        sub bx,w[offset _vocdatapoint]  ;bytes already processed, plus
        add bx,w[offset _voctoread]     ;bytes not read yet.
        jc skipthis                     ;On >64k, okay to skip AX bytes.
        cmp ax,bx                       ;Compare with bytes to skip.
        if a mov ax,bx                  ;Bytes to skip in this block
skipthis:
        push ax
        mul word _srate
        mov bx,cs:tquarter
        div bx
        sub _lasttlo,dx                 ;Update lasttlo
        jae ivf_nocarry
        add _lasttlo,bx                 ;Get back in range 0-17471
        inc ax                          ;And compensate
ivf_nocarry:
        add _lastthi,ax
        pop ax                          ;Get back # bytes to move on
        add ax,_vocdatapoint            ;New pointer
        jc ivf_beyondbuffer
        cmp ax,_vocdatalen
        if b jmp ivf_movetoax           ;In buffer, so move to corresponding sample
ivf_beyondbuffer:
        sub ax,_vocdatalen              ;Skip buffer bytes first.  AX=bytes to skip
        je ivf_skipped                  ; (now guaranteed to be <64K;
        push ax                         ;  vocdatapoint < vocdatalen)
        mov dx,ax
        xor cx,cx
        mov ax,04201                    ;Move file pointer
        mov bx,w[offset _vochandle]
        int 021
        pop ax
        mov bl,0                        ;Read error
        if c jmp ivf_error
ivf_skipped:
        sub _voctoread,ax               ;How many bytes remain?
        sbb word _voctoreadhi,0
        if ne jmp ivf_readfile
        cmp word _voctoread,0
        if ne jmp ivf_readfile
;Now read a new block, or terminate voc play mode when the file is finished
ivf_getblock:
        mov cx,1
        call read_vocfile
        mov bl,0                        ;Read error
        if c jmp ivf_error
        mov al,b[vocheader]             ;get type
        test al
        je ivf_end                      ;Terminate
        cmp al,1
        if e jmp ivf_data
        cmp al,2
        if e jmp ivf_data
        cmp al,3
        je ivf_silence
;        mov bl,2                        ;Unsupported block type
;        jmp ivf_error
        mov cx,3
        call read_vocfile
        mov bl,0
        if c jmp ivf_error
        mov dx,w[vocheader]
        xor ch,ch
        mov cl,b[offset vocheader+2]
        mov ax,04201                    ;Move file pointer to skip unknown
        mov bx,w[offset _vochandle]     ; or uninteresting block
        int 021
        mov bl,0
        if c jmp ivf_error
        jmp ivf_getblock


ivf_movetoax:
        mov _vocdatapoint,ax
        jmp ivf_reentry

ivf_end:
        mov _voctoread,0
        mov _voctoreadhi,0
        mov _vocdatapoint,0
        mov _vocdatalen,0
        mov bl,1
        jmp ivf_error

ivf_silence:
        mov _voctoread,0
        mov _voctoreadhi,0
        mov _vocdatapoint,0
        mov _vocdatalen,0
        mov cx,3
        call read_vocfile               ;Throw away the length
        mov cx,3
        call read_vocfile
        mov bl,0
        if c jmp ivf_error
        mov al,b[vocheader+2]           ;sample rate
        call sample_to_tstates
        mov _srate,ax
        mul w[vocheader]                ;compute # of T states to skip
        mov bx,cs:tquarter
        div bx
        sub _lasttlo,dx                 ;Update lasttlo
        jnc ivf_nocarry1
        add _lasttlo,bx                 ;Get back in range 0-17471
        inc ax                          ;And compensate
ivf_nocarry1:
        add _lastthi,ax
        mov ax,w[vocheader]
        xor dx,dx
        jmp update_vocpos

sample_to_tstates:                      ;converts voc sample rate byte to
        neg al                          ; # of T states per sample
        push bx
        xor ah,ah
        mov bx,ax
        add ax,ax
        add ax,ax
        add ax,ax
        sub ax,bx                       ;al now multiplied by 7
        shr ax,1                        ;Now by 3.5
        pop bx
        ret

ivf_error:
        pop dx
        pop cx
        pop ax
        pop ds
        pop ax
        popf
        lahf                            ;So far, normal IN return
        mov es:_vocerror,bl
        pop bx                          ;Drop return address (no IN done!)
        cmp byte es:vocerrmod,0         ;If not called from IN,
        jne ivf_error_1
        mov bl,0eb                      ;'VOC error'
        jmp far call_c_immediately
ivf_error_1:
        mov byte es:vocerrmod,2         ;Signal error, and
        retf                            ;return to windvocret




ivf_data:                               ;al=1 (data), 2 (continue)
        mov bh,al
        mov cx,3
        call read_vocfile
        mov bl,0
        jc ivf_error
        mov ax,[vocheader]              ;length of data
        mov _voctoread,ax
        mov _voclen,ax
        mov al,[vocheader+2]            ;hi byte
        xor ah,ah
        mov _voctoreadhi,ax
        mov _voclenhi,ax
        push bx
        call ivf_readit
        pop bx
        mov bl,0
        jc ivf_error
        cmp bh,2
        if e jmp update_vocpos1         ;if sound continue block then finished
        mov word _vocdatapoint,2        ;Start reading from the third byte
        push ds
        mov ds,w[offset vocbufseg]
        mov ax,[0]
        pop ds
        push ax
        call sample_to_tstates
        mov _srate,ax
        pop ax
        cmp ah,0                        ;No compression?
        mov bl,3                        ;Can't handle compressed blocks
        jne ivf_error
update_vocpos1:
        call filter_vocbuffer
        mov ax,_voclen
        mov dx,_voclenhi
update_vocpos:
        call makeseconds
        add ax,w[offset _vochsec]
        cmp ax,10000
        jbe no_hoverflow
        sub ax,10000
        inc dx
no_hoverflow:
        mov _vochsec,ax
        add _vocsec,dx
        jmp ivf_reentry                 ;Finished


ivf_readfile:
        call ivf_readit
        mov bl,0
        if c jmp ivf_error
        mov ax,_lastthi                 ;First make sure the high counters
        cmp ax,_tstatehi                ; don't wrap (after approx 5 minutes)
        if a mov ax,_tstatehi
        sub _lastthi,ax
        sub _tstatehi,ax
        call filter_vocbuffer
        jmp ivf_reentry


ivf_readit:                             ;c=error
        mov bx,w[offset _vochandle]
        mov ah,03f
        cmp word _voctoreadhi,0
        jne ivfrf_48k
        mov cx,w[offset _voctoread]
        cmp cx,cs:vocbuflen             ;48K normally
        jb ivfrf_notmuch
ivfrf_48k:
        mov cx,cs:vocbuflen
ivfrf_notmuch:
        mov word _vocdatapoint,0
        cmp vocerrmod,0                 ;Called from windvoc?
        if a cmp cx,8
        if a mov cx,8                   ;If so, only read tiny portion of file
        sub _voctoread,cx
        sbb word _voctoreadhi,0
        mov _vocdatalen,cx
        push ds
        mov ds,w[offset vocbufseg]
        xor dx,dx
        int 021
        pop ds
        jc ret
        cmp ax,cx
        ret


read_vocfile:
        push ds
        push ax
        push bx
        push dx
        push cs
        pop ds
        mov dx,offset vocheader
        mov bx,es:_vochandle
        mov ah,03f
        int 021
        if nc cmp ax,cx                 ;now c=error
        pop dx
        pop bx
        pop ax
        pop ds
        ret


makeseconds:                    ;in: dxax=# bytes of sample rate _srate T
                                ; states per byte. Out: dx=seconds, ax=1/10000s's
        mov cx,dx
        mul word _srate
        push ax
        push dx
        mov ax,cx
        mul word _srate
        pop cx
        add cx,ax
        pop ax
        adc dx,0                ;dxcxax = # T states in this block
                                ;21 minutes corresponds to 2^32 T states.
        mov bl,6
msec_shr:
        shr dx,1
        rcr cx,1
        rcr ax,1
        dec bl
        jne msec_shr
        adc ax,0
        adc cx,0
        mov dx,cx
        mov cx,54688            ;3.5*10^6 / 64
        div cx                  ;ax=# seconds
        push ax
        mov ax,11984            ;10000*65536/54688
        mul dx
        add ax,ax
        adc dx,0
        pop ax
        xchg ax,dx              ;ax=10000s of seconds, dx=seconds
        ret


compute_position:               ;Out: AX=# of seconds of voc file played
        mov ax,_voctoread       ; (bx=10000s of seconds)
        mov dx,_voctoreadhi
        add ax,_vocdatalen
        adc dx,0
        sub ax,_vocdatapoint
        sbb dx,0                ;dxax=# bytes to be read from this block
        call makeseconds        ;dx=# seconds, ax=hundreds
        mov bx,_vochsec
        sub bx,ax
        if b add bx,10000
        mov ax,_vocsec
        sbb ax,dx               ;ax=seconds, bx=10000s
        ret



windvoc:                        ;ds,es = cs
;In: ax=position to move to, in seconds
        push ax
        mov ax,04200
        mov bx,_vochandle
        mov dx,01a              ;skip header
        xor cx,cx
        int 021                 ;move file pointer
        mov _srate,100          ;small value
        mov _vocdatapoint,0     ;all buffers are empty
        mov _vocdatalen,0
        mov _voctoread,0
        mov _voctoreadhi,0
        mov _vocsec,0           ;total seconds played
        mov _vochsec,0
        mov _lastthi,0
        mov _tstatehi,0
        mov ax,_tstates
        mov _lasttlo,ax
        pop ax                  ;get back # seconds to skip
windvoc1:
        mov byte vocerrmod,1    ;signal: don't jump to C when an error occurs
        mov bx,ax
        cmp bx,150
        if a mov bx,150
        sub ax,bx               ;ax=seconds left
        push ax
        mov ax,_lastthi                 ;First make sure the high counters
        cmp ax,_tstatehi                ; don't wrap (after approx 5 minutes)
        if a mov ax,_tstatehi
        sub _lastthi,ax
        sub _tstatehi,ax
        mov ax,bx
        mov bx,200              ;hi counter = 1/200s
        mul bx
        add _tstatehi,ax
        push cs                 ;now set up stack frame for calling IN
        mov ax,windvocret
        push ax
        mov ax,emul_retf_label
        push ax
        pushf
        push ax
        push ds
        mov bx,0fffe
        mov al,bh
        push ax
        jmp in_voc_far
windvocret:
        pop ax
        cmp byte vocerrmod,2
        mov byte vocerrmod,0
        je windvoc_err
        test ax
        jne windvoc1
        ret                             ;ax=0: success
windvoc_err:
        mov ax,0ffff
        cmp byte _vocerror,1            ;terminate?
        if e mov ax,1
        ret


filter_vocbuffer:
; filters out low freq components from buffer starting at _vocdatapoint
;to _vocdatalen, using _srate (# of T states per sample) and curzero
;We try to filter out things below approx 500 Hz, i.e. period of 7000 T's.
;Averaged value(n+1) = alpha signal(n+1) + (1-alpha) av.value(n).  Say
;N * _srate = 7000, then we want (1-alpha)^N approx 1/2, i.e. 1-N alpha=1/2,
;i.e. alpha = 1/2N = _srate/14000, 256*alpha = _srate/55, say _srate/64.
;In comments, alpha and 1-alpha denote actually 256*alpha and 256*(1-alpha)
;Signal & current average are in range 0-ffff
;Uses ax,bx,cx,dx
        mov ax,_srate                   ;900 T's, approx. 4 kHz
        cmp ax,900
        ja ret                          ;don't filter with such low sample rates
        add ax,64
        mov cl,7
        shr ax,cl
        test ax,ax
        if e mov ax,1                   ;this is 256*alpha
        sub ah,al                       ;ah = 1-alpha
        xchg ah,al                      ;now ah=alpha, al=1-alpha
        mov dx,ax
        mov bx,_vocdatapoint
        push ds
        push si
        push di
        mov si,_vocdatalen
        mov cx,w[offset curaverage]
        mov ds,w[offset vocbufseg]
;**
;        mov cx,08000
;        mov dx,0
;**
filter_loop:
        cmp bx,si
        jae filter_end
        push dx
        xor ah,ah
        mov al,dh                       ;alpha
        mov dh,[bx]                     ;get byte from buffer
        mul dh                          ;ax = alpha * signal / 256
        sub dh,5                        ;tiny offset
;        cmp ch,dh                       ;compare signal against current average
        cmp dh,ch
        sbb dh,dh
        mov [bx],dh                     ;adjust signal
        xchg ax,cx                      ;get current average into ax
        xor dh,dh
;**
;        mov dx,0100
;**
        mul dx                          ;axdx = (1-alpha)*current average
        add al,al
        adc cl,ah
        adc ch,dl                       ;add axdx to cx, obtaining new curr average
        pop dx
        inc bx
        jmp filter_loop

filter_end:
        pop di
        pop si
        pop ds
        mov w[offset curaverage],cx
        ret



startup ends
