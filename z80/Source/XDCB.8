EMULATOR SEGMENT BYTE PUBLIC

;
;De subroutines voor de instructies met een DDCB of FDCB prefix.
;Samen met vele onofficiele instructies.
;
;Alle codeblokjes hebben offset 0B7
;This file occupies 0b7+191*256 to 0b7+255*256
;
;xdcb.8 should be assembled twice; the first time, the usual ddcb and fdcb
;opcodes are built.  In the second pass, the same code is used to build
;the pieces for the inofficial ddcb and fdcb opcodes.  They terminate with
;jumps to INOFF_XDCB.
;
;Info on these inofficial CB opcodes was given to me by Arnt Gulbrandsen.
;The info appeared in NORTHERN BYTES (in case this sounds familiar...),
;volume 5 number 8, and seems to be typed over by David Librik.
;

#if !c00                  ;If this is the first pass, etc.

c00 equ 02000
ifcjmpcarbx macro
##if c00
        if c jmp carbx
##else
        if c jmp carbx_ioxdcb
##endif
#em
jx_cb macro
##if c00
        jx #1
##else
        jmp inoff_xdcb
##endif
#em
label_cb macro
##if c00
#1:
##else
#1_i:
##endif
#em

#else                           ;second pass, now do the inofficial ones

c00 equ 0

        org 0bfb7
inoff_xdcb:
        push ax
        mov al,[di-1]                   ;get opcode (xD CB disp opcode)
        test al,4                       ;0..7=b,c,d,e,h,l,(hl),a; 6 not possible
        jz ioxdcb_bcde
        test al,2
        jz ioxdcb_hl
        pop ax                          ;7
        mov al,[bx]                     ;copy result to A register
        jmp short ioxdcb_jxnopop
ioxdcb_bcde:
        test al,2
        jz ioxdcb_bc
        xchg dx,si
        test al,1
        jz ioxdcb_d
        mov dl,[bx]
        jmp short ioxdcb_e
ioxdcb_d:
        mov dh,[bx]
ioxdcb_e:
        xchg dx,si
ioxdcb_jx:
        pop ax
ioxdcb_jxnopop:
        jx 23
ioxdcb_bc:
        test al,1
        jz ioxdcb_b
        mov cl,[bx]
        jmp short ioxdcb_jx
ioxdcb_b:
        mov ch,[bx]
        jmp short ioxdcb_jx
ioxdcb_hl:
        test al,1
        jz ioxdcb_h
        mov dl,[bx]
        jmp short ioxdcb_jx
ioxdcb_h:
        mov dh,[bx]
        jmp short ioxdcb_jx
#endif





;First label: DDCB06

        org c00+0c0b7
label_cb DDCB06
        SAHF
        mov ah,[bx]
        ROL ah,1
        ifcjmpcarbx
        call testbx
        if c mov [bx],ah
        TEST ah,ah
        LAHF
        jx_cb 23


        testoverflow
        org c00+0c1b7
label_cb DDCB0E
        SAHF
        mov ah,[bx]
        ROR ah,1
        ifcjmpcarbx
        call testbx
        if c mov [bx],ah
        TEST ah,ah
        LAHF
        jx_cb 23


        testoverflow
        org c00+0c2b7
label_cb DDCB16
        SAHF
        mov ah,[bx]
        RCL ah,1
        ifcjmpcarbx
        call testbx
        if c mov [bx],ah
        TEST ah,ah
        LAHF
        jx_cb 23


        testoverflow
        org c00+0c3b7
label_cb DDCB1E
        SAHF
        mov ah,[bx]
        RCR ah,1
        ifcjmpcarbx
        call testbx
        if c mov [bx],ah
        TEST ah,ah
        LAHF
        jx_cb 23


        testoverflow
        org c00+0c4b7
label_cb ddcb26
        call testbx
#if c00                                 ;normal opcodes
        if nc jmp salrom
#else                                   ;inofficial
        if nc jmp salrom_ioxdcb
#endif
        SAHF
        mov ah,[bx]
        sal ah,1
        ifcjmpcarbx
        mov [bx],ah
        TEST ah,ah
        LAHF
        jx_cb 23


        testoverflow
        org c00+0c5b7
label_cb ddcb2e
        call testbx
#if c00                                 ;normal opcodes
        if nc jmp sarrom
#else                                   ;inofficial
        if nc jmp sarrom_ioxdcb
#endif
        SAHF
        mov ah,[bx]
        sar ah,1
        ifcjmpcarbx
        mov [bx],ah
        TEST ah,ah
        LAHF
        jx_cb 23


        testoverflow
        org c00+0c6b7
label_cb DDCB36
        SAHF
        stc
        mov ah,[bx]
        rcl ah,1
        ifcjmpcarbx
        call testbx
        if c mov [bx],ah
        TEST ah,ah
        LAHF
        jx_cb 23


        testoverflow
        org c00+0c7b7
label_cb ddcb3e
        call testbx
#if c00                                 ;normal opcodes
        if nc jmp shrrom
#else                                   ;inofficial
        if nc jmp shrrom_ioxdcb
#endif
        SAHF
        mov ah,[bx]
        shr ah,1
        ifcjmpcarbx
        mov [bx],ah
        TEST ah,ah
        LAHF
        jx_cb 23


        testoverflow
        org c00+0c8b7
label_cb DDCB46
        AND AH,01
        or ah,010
        TEST BYTE [BX],1
        IF Z OR AH,044
        jx_cb 20


        testoverflow
        org c00+0c9b7
label_cb DDCB4E
        AND AH,01
        or ah,010
        TEST BYTE [BX],2
        IF Z OR AH,044
        jx_cb 20


        testoverflow
        org c00+0cab7
label_cb DDCB56
        AND AH,01
        or ah,010
        TEST BYTE [BX],4
        IF Z OR AH,044
        jx_cb 20


        testoverflow
        org c00+0cbb7
label_cb DDCB5E
        AND AH,01
        or ah,018
        TEST BYTE [BX],8
        IF Z xOR AH,04c
        jx_cb 20


        testoverflow
        org c00+0ccb7
label_cb DDCB66
        AND AH,01
        or ah,010
        TEST BYTE [BX],16
        IF Z OR AH,044
        jx_cb 20


        testoverflow
        org c00+0cdb7
label_cb DDCB6E
        AND AH,01
        or ah,030
        TEST BYTE [BX],32
        IF Z xOR AH,064
        jx_cb 20


        testoverflow
        org c00+0ceb7
label_cb DDCB76
        AND AH,01
        or ah,010
        TEST BYTE [BX],64
        IF Z OR AH,044
        jx_cb 20


        testoverflow
        org c00+0cfb7
label_cb ddcb7e
        and ah,01
        or ah,090
        test byte [bx],128
        if z xor ah,0c4
        jx_cb 20


        testoverflow
        org c00+0d0b7
label_cb DDCB86
        AND BYTE [BX],254
        jx_cb 23


        testoverflow
        org c00+0d1b7
label_cb DDCB8E
        AND BYTE [BX],253
        jx_cb 23


        testoverflow
        org c00+0d2b7
label_cb DDCB96
        AND BYTE [BX],251
        jx_cb 23


        testoverflow
        org c00+0d3b7
label_cb DDCB9E
        AND BYTE [BX],247
        jx_cb 23


        testoverflow
        org c00+0d4b7
label_cb DDCBA6
        AND BYTE [BX],239
        jx_cb 23


        testoverflow
        org c00+0d5b7
label_cb DDCBAE
        AND BYTE [BX],223
        jx_cb 23


        testoverflow
        org c00+0d6b7
label_cb DDCBB6
        AND BYTE [BX],191
        jx_cb 23


        testoverflow
        org c00+0d7b7
label_cb DDCBBE
        AND BYTE [BX],127
        jx_cb 23


        testoverflow
        org c00+0d8b7
label_cb DDCBC6
        OR BYTE [BX],1
        jx_cb 23


        testoverflow
        org c00+0d9b7
label_cb DDCBCE
        OR BYTE [BX],2
        jx_cb 23


        testoverflow
        org c00+0dab7
label_cb DDCBD6
        OR BYTE [BX],4
        jx_cb 23


        testoverflow
        org c00+0dbb7
label_cb DDCBDE
        OR BYTE [BX],8
        jx_cb 23


        testoverflow
        org c00+0dcb7
label_cb DDCBE6
        OR BYTE [BX],16
        jx_cb 23


        testoverflow
        org c00+0ddb7
label_cb DDCBEE
        OR BYTE [BX],32
        jx_cb 23


        testoverflow
        org c00+0deb7
label_cb DDCBF6
        OR BYTE [BX],64
        jx_cb 23


        testoverflow
        org c00+0dfb7
label_cb DDCBFE
        OR B[BX],128
        jx_cb 23


        testoverflow
        org 0FFEF
        NOP


EMULATOR ENDS
